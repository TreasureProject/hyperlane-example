{
  "address": "0xb2B4bCEF2094c7a56f4C6BDaE3c555ADC7199F3E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mailbox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyArrays",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "tokenId",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "tokenIdLength",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "amountLength",
          "type": "uint128"
        }
      ],
      "name": "TokenTransferLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TokenTransferValueTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UseERC1155BalanceOf",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        }
      ],
      "name": "GasSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_hook",
          "type": "address"
        }
      ],
      "name": "HookSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_ism",
          "type": "address"
        }
      ],
      "name": "IsmSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "origin",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "recipient",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReceivedTransferRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "destination",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "recipient",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SentTransferRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PACKAGE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "destinationGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domains",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_router",
          "type": "bytes32"
        }
      ],
      "name": "enrollRemoteRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_domains",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_addresses",
          "type": "bytes32[]"
        }
      ],
      "name": "enrollRemoteRouters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hook",
      "outputs": [
        {
          "internalType": "contract IPostDispatchHook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_hook",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interchainSecurityModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interchainSecurityModule",
      "outputs": [
        {
          "internalType": "contract IInterchainSecurityModule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mailbox",
      "outputs": [
        {
          "internalType": "contract IMailbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destinationDomain",
          "type": "uint32"
        }
      ],
      "name": "quoteGasPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        }
      ],
      "name": "routers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        }
      ],
      "name": "setDestinationGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            }
          ],
          "internalType": "struct GasRouter.GasRouterConfig[]",
          "name": "gasConfigs",
          "type": "tuple[]"
        }
      ],
      "name": "setDestinationGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hook",
          "type": "address"
        }
      ],
      "name": "setHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        }
      ],
      "name": "setInterchainSecurityModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "tokenId",
          "type": "uint128"
        },
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_recipient",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountOrId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_hookMetadata",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_hook",
          "type": "address"
        }
      ],
      "name": "transferRemote",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_recipient",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountOrId",
          "type": "uint256"
        }
      ],
      "name": "transferRemote",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "destination",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "recipient",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "tokenId",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "transferRemote",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "destination",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "recipient",
          "type": "bytes32"
        },
        {
          "internalType": "uint128[]",
          "name": "tokenIds",
          "type": "uint128[]"
        },
        {
          "internalType": "uint128[]",
          "name": "amounts",
          "type": "uint128[]"
        }
      ],
      "name": "transferRemoteBatch",
      "outputs": [
        {
          "internalType": "uint128[]",
          "name": "remainingIds",
          "type": "uint128[]"
        },
        {
          "internalType": "uint128[]",
          "name": "remainingAmounts",
          "type": "uint128[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        }
      ],
      "name": "unenrollRemoteRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_domains",
          "type": "uint32[]"
        }
      ],
      "name": "unenrollRemoteRouters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5eeb6f6b07556e28a963331912aba47b1a8ef17389b6e4d9d90aebfd7d84db4e",
  "receipt": {
    "to": null,
    "from": "0x070337669A3e72249F39434Aa2CA326Ab68f09F8",
    "contractAddress": "0xb2B4bCEF2094c7a56f4C6BDaE3c555ADC7199F3E",
    "transactionIndex": 59,
    "gasUsed": "4006003",
    "logsBloom": "0x
    "blockHash": "0xc78b43569c7b8bb4f5bc66873f6931c4e99685485829400e8c53dc57bb5fe0d2",
    "transactionHash": "0x5eeb6f6b07556e28a963331912aba47b1a8ef17389b6e4d9d90aebfd7d84db4e",
    "logs": [
      {
        "transactionIndex": 59,
        "blockNumber": 7313895,
        "transactionHash": "0x5eeb6f6b07556e28a963331912aba47b1a8ef17389b6e4d9d90aebfd7d84db4e",
        "address": "0xb2B4bCEF2094c7a56f4C6BDaE3c555ADC7199F3E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000070337669a3e72249f39434aa2ca326ab68f09f8"
        ],
        "data": "0x",
        "logIndex": 181,
        "blockHash": "0xc78b43569c7b8bb4f5bc66873f6931c4e99685485829400e8c53dc57bb5fe0d2"
      }
    ],
    "blockNumber": 7313895,
    "cumulativeGasUsed": "11487380",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfFAEF09B3cd11D9b20d1a19bECca54EEC2884766"
  ],
  "numDeployments": 1,
  "solcInputHash": "80a19a1af2ed25e82a416c974ae8c229",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mailbox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArrays\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"tokenIdLength\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountLength\",\"type\":\"uint128\"}],\"name\":\"TokenTransferLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenTransferValueTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UseERC1155BalanceOf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"GasSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"HookSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ism\",\"type\":\"address\"}],\"name\":\"IsmSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedTransferRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SentTransferRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PACKAGE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"destinationGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domains\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_router\",\"type\":\"bytes32\"}],\"name\":\"enrollRemoteRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_domains\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_addresses\",\"type\":\"bytes32[]\"}],\"name\":\"enrollRemoteRouters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hook\",\"outputs\":[{\"internalType\":\"contract IPostDispatchHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interchainSecurityModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interchainSecurityModule\",\"outputs\":[{\"internalType\":\"contract IInterchainSecurityModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailbox\",\"outputs\":[{\"internalType\":\"contract IMailbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destinationDomain\",\"type\":\"uint32\"}],\"name\":\"quoteGasPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"routers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDestinationGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"internalType\":\"struct GasRouter.GasRouterConfig[]\",\"name\":\"gasConfigs\",\"type\":\"tuple[]\"}],\"name\":\"setDestinationGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"setHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"setInterchainSecurityModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountOrId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_hookMetadata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"transferRemote\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountOrId\",\"type\":\"uint256\"}],\"name\":\"transferRemote\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"transferRemote\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint128[]\",\"name\":\"tokenIds\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"amounts\",\"type\":\"uint128[]\"}],\"name\":\"transferRemoteBatch\",\"outputs\":[{\"internalType\":\"uint128[]\",\"name\":\"remainingIds\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"remainingAmounts\",\"type\":\"uint128[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"unenrollRemoteRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_domains\",\"type\":\"uint32[]\"}],\"name\":\"unenrollRemoteRouters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Compatible with existing Hyperlane protocol deployments by packing tokenId and amount into a single uint256. Uses standard TokenRouter interface without modifications. Limitation: Both tokenId and amount must be <= type(uint128).max\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"ReceivedTransferRemote(uint32,bytes32,uint256)\":{\"details\":\"Emitted on `_handle` when a transfer message is processed.\",\"params\":{\"amount\":\"The amount of tokens minted on the destination chain.\",\"origin\":\"The identifier of the origin chain.\",\"recipient\":\"The address of the recipient on the destination chain.\"}},\"SentTransferRemote(uint32,bytes32,uint256)\":{\"details\":\"Emitted on `transferRemote` when a transfer message is dispatched.\",\"params\":{\"amount\":\"The amount of tokens burnt on the origin chain.\",\"destination\":\"The identifier of the destination chain.\",\"recipient\":\"The address of the recipient on the destination chain.\"}},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"enrollRemoteRouter(uint32,bytes32)\":{\"params\":{\"_domain\":\"The domain of the remote Application Router\",\"_router\":\"The address of the remote Application Router\"}},\"enrollRemoteRouters(uint32[],bytes32[])\":{\"params\":{\"_addresses\":\"The addresses of the remote Application Routers\",\"_domains\":\"The domains of the remote Application Routers\"}},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"handle(uint32,bytes32,bytes)\":{\"params\":{\"_message\":\"The message\",\"_origin\":\"The origin domain\",\"_sender\":\"The sender address\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quoteGasPayment(uint32)\":{\"params\":{\"_destinationDomain\":\"The domain of the router.\"},\"returns\":{\"_0\":\"_gasPayment Payment computed by the registered InterchainGasPaymaster.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"routers(uint32)\":{\"details\":\"Returns 0 address if no router is enrolled for the given domain\",\"params\":{\"_domain\":\"The remote domain ID.\"},\"returns\":{\"_0\":\"router The address of the Router contract for the given domain\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setDestinationGas((uint32,uint256)[])\":{\"params\":{\"gasConfigs\":\"The array of GasRouterConfig structs\"}},\"setDestinationGas(uint32,uint256)\":{\"params\":{\"domain\":\"The destination domain ID\",\"gas\":\"The gas limit\"}},\"setHook(address)\":{\"params\":{\"_hook\":\"The address of the hook contract.\"}},\"setInterchainSecurityModule(address)\":{\"params\":{\"_module\":\"The address of the interchain security module contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferRemote(uint32,bytes32,uint256)\":{\"details\":\"Delegates transfer logic to `_transferFromSender` implementation.Emits `SentTransferRemote` event on the origin chain.\",\"params\":{\"_amountOrId\":\"The amount or identifier of tokens to be sent to the remote recipient.\",\"_destination\":\"The identifier of the destination chain.\",\"_recipient\":\"The address of the recipient on the destination chain.\"},\"returns\":{\"messageId\":\"The identifier of the dispatched message.\"}},\"transferRemote(uint32,bytes32,uint256,bytes,address)\":{\"details\":\"Delegates transfer logic to `_transferFromSender` implementation.The metadata is the token metadata, and is DIFFERENT than the hook metadata.Emits `SentTransferRemote` event on the origin chain.\",\"params\":{\"_amountOrId\":\"The amount or identifier of tokens to be sent to the remote recipient.\",\"_destination\":\"The identifier of the destination chain.\",\"_hook\":\"The post dispatch hook to be called by the Mailbox\",\"_hookMetadata\":\"The metadata passed into the hook\",\"_recipient\":\"The address of the recipient on the destination chain.\"},\"returns\":{\"messageId\":\"The identifier of the dispatched message.\"}},\"unenrollRemoteRouter(uint32)\":{\"params\":{\"_domain\":\"The domain of the remote Application Router\"}},\"unenrollRemoteRouters(uint32[])\":{\"params\":{\"_domains\":\"The domains of the remote Application Routers\"}}},\"title\":\"Unofficial and UNAUDITED Hyperlane ERC1155 Token Router\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"enrollRemoteRouter(uint32,bytes32)\":{\"notice\":\"Register the address of a Router contract for the same Application on a remote chain\"},\"enrollRemoteRouters(uint32[],bytes32[])\":{\"notice\":\"Batch version of `enrollRemoteRouter`\"},\"handle(uint32,bytes32,bytes)\":{\"notice\":\"Handles an incoming message\"},\"quoteGasPayment(uint32)\":{\"notice\":\"Returns the gas payment required to dispatch a message to the given domain's router.\"},\"routers(uint32)\":{\"notice\":\"Returns the address of the Router contract for the given domain\"},\"setDestinationGas((uint32,uint256)[])\":{\"notice\":\"Sets the gas amount dispatched for each configured domain.\"},\"setDestinationGas(uint32,uint256)\":{\"notice\":\"Sets the gas amount dispatched for each configured domain.\"},\"setHook(address)\":{\"notice\":\"Sets the address of the application's custom hook.\"},\"setInterchainSecurityModule(address)\":{\"notice\":\"Sets the address of the application's custom interchain security module.\"},\"transferRemote(uint32,bytes32,uint256)\":{\"notice\":\"Transfers `_amountOrId` token to `_recipient` on `_destination` domain.\"},\"transferRemote(uint32,bytes32,uint256,bytes,address)\":{\"notice\":\"Transfers `_amountOrId` token to `_recipient` on `_destination` domain with a specified hook\"},\"unenrollRemoteRouter(uint32)\":{\"notice\":\"Unregister the domain\"},\"unenrollRemoteRouters(uint32[])\":{\"notice\":\"Batch version of `unenrollRemoteRouter`\"}},\"notice\":\"Enables cross-chain ERC1155 token transfers using Hyperlane's messaging protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExampleHypERC1155.sol\":\"HypERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@hyperlane-xyz/core/contracts/PackageVersioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/**\\n * @title PackageVersioned\\n * @notice Package version getter for contracts\\n **/\\nabstract contract PackageVersioned {\\n    // GENERATED CODE - DO NOT EDIT\\n    string public constant PACKAGE_VERSION = \\\"5.8.3\\\";\\n}\\n\",\"keccak256\":\"0x0fe3aef21081f1518687ad5c2e9dd18060796506fafdb2fe29336d5a2b3fc563\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/client/GasRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\n// ============ Internal Imports ============\\nimport {Router} from \\\"./Router.sol\\\";\\nimport {StandardHookMetadata} from \\\"../hooks/libs/StandardHookMetadata.sol\\\";\\n\\nabstract contract GasRouter is Router {\\n    event GasSet(uint32 domain, uint256 gas);\\n\\n    // ============ Mutable Storage ============\\n    mapping(uint32 => uint256) public destinationGas;\\n\\n    struct GasRouterConfig {\\n        uint32 domain;\\n        uint256 gas;\\n    }\\n\\n    constructor(address _mailbox) Router(_mailbox) {}\\n\\n    /**\\n     * @notice Sets the gas amount dispatched for each configured domain.\\n     * @param gasConfigs The array of GasRouterConfig structs\\n     */\\n    function setDestinationGas(\\n        GasRouterConfig[] calldata gasConfigs\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < gasConfigs.length; i += 1) {\\n            _setDestinationGas(gasConfigs[i].domain, gasConfigs[i].gas);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the gas amount dispatched for each configured domain.\\n     * @param domain The destination domain ID\\n     * @param gas The gas limit\\n     */\\n    function setDestinationGas(uint32 domain, uint256 gas) external onlyOwner {\\n        _setDestinationGas(domain, gas);\\n    }\\n\\n    /**\\n     * @notice Returns the gas payment required to dispatch a message to the given domain's router.\\n     * @param _destinationDomain The domain of the router.\\n     * @return _gasPayment Payment computed by the registered InterchainGasPaymaster.\\n     */\\n    function quoteGasPayment(\\n        uint32 _destinationDomain\\n    ) external view returns (uint256) {\\n        return _GasRouter_quoteDispatch(_destinationDomain, \\\"\\\", address(hook));\\n    }\\n\\n    function _GasRouter_hookMetadata(\\n        uint32 _destination\\n    ) internal view returns (bytes memory) {\\n        return\\n            StandardHookMetadata.overrideGasLimit(destinationGas[_destination]);\\n    }\\n\\n    function _setDestinationGas(uint32 domain, uint256 gas) internal {\\n        destinationGas[domain] = gas;\\n        emit GasSet(domain, gas);\\n    }\\n\\n    function _GasRouter_dispatch(\\n        uint32 _destination,\\n        uint256 _value,\\n        bytes memory _messageBody,\\n        address _hook\\n    ) internal returns (bytes32) {\\n        return\\n            _Router_dispatch(\\n                _destination,\\n                _value,\\n                _messageBody,\\n                _GasRouter_hookMetadata(_destination),\\n                _hook\\n            );\\n    }\\n\\n    function _GasRouter_quoteDispatch(\\n        uint32 _destination,\\n        bytes memory _messageBody,\\n        address _hook\\n    ) internal view returns (uint256) {\\n        return\\n            _Router_quoteDispatch(\\n                _destination,\\n                _messageBody,\\n                _GasRouter_hookMetadata(_destination),\\n                _hook\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x09e9b8850c87c7fe746d2a61bd475a439ec850b8f1df3e0a502bd752efeab730\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/client/MailboxClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\n// ============ Internal Imports ============\\nimport {IMailbox} from \\\"../interfaces/IMailbox.sol\\\";\\nimport {IPostDispatchHook} from \\\"../interfaces/hooks/IPostDispatchHook.sol\\\";\\nimport {IInterchainSecurityModule} from \\\"../interfaces/IInterchainSecurityModule.sol\\\";\\nimport {Message} from \\\"../libs/Message.sol\\\";\\nimport {PackageVersioned} from \\\"../PackageVersioned.sol\\\";\\n\\n// ============ External Imports ============\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract MailboxClient is OwnableUpgradeable, PackageVersioned {\\n    using Message for bytes;\\n\\n    event HookSet(address _hook);\\n    event IsmSet(address _ism);\\n\\n    IMailbox public immutable mailbox;\\n\\n    uint32 public immutable localDomain;\\n\\n    IPostDispatchHook public hook;\\n\\n    IInterchainSecurityModule public interchainSecurityModule;\\n\\n    uint256[48] private __GAP; // gap for upgrade safety\\n\\n    // ============ Modifiers ============\\n    modifier onlyContract(address _contract) {\\n        require(\\n            Address.isContract(_contract),\\n            \\\"MailboxClient: invalid mailbox\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyContractOrNull(address _contract) {\\n        require(\\n            Address.isContract(_contract) || _contract == address(0),\\n            \\\"MailboxClient: invalid contract setting\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only accept messages from an Hyperlane Mailbox contract\\n     */\\n    modifier onlyMailbox() {\\n        require(\\n            msg.sender == address(mailbox),\\n            \\\"MailboxClient: sender not mailbox\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _mailbox) onlyContract(_mailbox) {\\n        mailbox = IMailbox(_mailbox);\\n        localDomain = mailbox.localDomain();\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the application's custom hook.\\n     * @param _hook The address of the hook contract.\\n     */\\n    function setHook(\\n        address _hook\\n    ) public virtual onlyContractOrNull(_hook) onlyOwner {\\n        hook = IPostDispatchHook(_hook);\\n        emit HookSet(_hook);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the application's custom interchain security module.\\n     * @param _module The address of the interchain security module contract.\\n     */\\n    function setInterchainSecurityModule(\\n        address _module\\n    ) public onlyContractOrNull(_module) onlyOwner {\\n        interchainSecurityModule = IInterchainSecurityModule(_module);\\n        emit IsmSet(_module);\\n    }\\n\\n    // ======== Initializer =========\\n    function _MailboxClient_initialize(\\n        address _hook,\\n        address _interchainSecurityModule,\\n        address _owner\\n    ) internal onlyInitializing {\\n        __Ownable_init();\\n        setHook(_hook);\\n        setInterchainSecurityModule(_interchainSecurityModule);\\n        _transferOwnership(_owner);\\n    }\\n\\n    function _isLatestDispatched(bytes32 id) internal view returns (bool) {\\n        return mailbox.latestDispatchedId() == id;\\n    }\\n\\n    function _isDelivered(bytes32 id) internal view returns (bool) {\\n        return mailbox.delivered(id);\\n    }\\n}\\n\",\"keccak256\":\"0x2d7d3dadcc112ace41a3dcf16ac3f48bb1f5d1e5bdc7dc29b61b5cfed74456fa\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/client/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {IMessageRecipient} from \\\"../interfaces/IMessageRecipient.sol\\\";\\nimport {IPostDispatchHook} from \\\"../interfaces/hooks/IPostDispatchHook.sol\\\";\\nimport {IInterchainSecurityModule} from \\\"../interfaces/IInterchainSecurityModule.sol\\\";\\nimport {MailboxClient} from \\\"./MailboxClient.sol\\\";\\nimport {EnumerableMapExtended} from \\\"../libs/EnumerableMapExtended.sol\\\";\\n\\n// ============ External Imports ============\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nabstract contract Router is MailboxClient, IMessageRecipient {\\n    using EnumerableMapExtended for EnumerableMapExtended.UintToBytes32Map;\\n    using Strings for uint32;\\n\\n    // ============ Mutable Storage ============\\n    EnumerableMapExtended.UintToBytes32Map internal _routers;\\n\\n    uint256[48] private __GAP; // gap for upgrade safety\\n\\n    constructor(address _mailbox) MailboxClient(_mailbox) {}\\n\\n    // ============ External functions ============\\n    function domains() external view returns (uint32[] memory) {\\n        return _routers.uint32Keys();\\n    }\\n\\n    /**\\n     * @notice Returns the address of the Router contract for the given domain\\n     * @param _domain The remote domain ID.\\n     * @dev Returns 0 address if no router is enrolled for the given domain\\n     * @return router The address of the Router contract for the given domain\\n     */\\n    function routers(uint32 _domain) public view virtual returns (bytes32) {\\n        (, bytes32 _router) = _routers.tryGet(_domain);\\n        return _router;\\n    }\\n\\n    /**\\n     * @notice Unregister the domain\\n     * @param _domain The domain of the remote Application Router\\n     */\\n    function unenrollRemoteRouter(uint32 _domain) external virtual onlyOwner {\\n        _unenrollRemoteRouter(_domain);\\n    }\\n\\n    /**\\n     * @notice Register the address of a Router contract for the same Application on a remote chain\\n     * @param _domain The domain of the remote Application Router\\n     * @param _router The address of the remote Application Router\\n     */\\n    function enrollRemoteRouter(\\n        uint32 _domain,\\n        bytes32 _router\\n    ) external virtual onlyOwner {\\n        _enrollRemoteRouter(_domain, _router);\\n    }\\n\\n    /**\\n     * @notice Batch version of `enrollRemoteRouter`\\n     * @param _domains The domains of the remote Application Routers\\n     * @param _addresses The addresses of the remote Application Routers\\n     */\\n    function enrollRemoteRouters(\\n        uint32[] calldata _domains,\\n        bytes32[] calldata _addresses\\n    ) external virtual onlyOwner {\\n        require(_domains.length == _addresses.length, \\\"!length\\\");\\n        uint256 length = _domains.length;\\n        for (uint256 i = 0; i < length; i += 1) {\\n            _enrollRemoteRouter(_domains[i], _addresses[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch version of `unenrollRemoteRouter`\\n     * @param _domains The domains of the remote Application Routers\\n     */\\n    function unenrollRemoteRouters(\\n        uint32[] calldata _domains\\n    ) external virtual onlyOwner {\\n        uint256 length = _domains.length;\\n        for (uint256 i = 0; i < length; i += 1) {\\n            _unenrollRemoteRouter(_domains[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Handles an incoming message\\n     * @param _origin The origin domain\\n     * @param _sender The sender address\\n     * @param _message The message\\n     */\\n    function handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes calldata _message\\n    ) external payable virtual override onlyMailbox {\\n        bytes32 _router = _mustHaveRemoteRouter(_origin);\\n        require(_router == _sender, \\\"Enrolled router does not match sender\\\");\\n        _handle(_origin, _sender, _message);\\n    }\\n\\n    // ============ Virtual functions ============\\n    function _handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes calldata _message\\n    ) internal virtual;\\n\\n    // ============ Internal functions ============\\n\\n    /**\\n     * @notice Set the router for a given domain\\n     * @param _domain The domain\\n     * @param _address The new router\\n     */\\n    function _enrollRemoteRouter(\\n        uint32 _domain,\\n        bytes32 _address\\n    ) internal virtual {\\n        _routers.set(_domain, _address);\\n    }\\n\\n    /**\\n     * @notice Remove the router for a given domain\\n     * @param _domain The domain\\n     */\\n    function _unenrollRemoteRouter(uint32 _domain) internal virtual {\\n        require(_routers.remove(_domain), _domainNotFoundError(_domain));\\n    }\\n\\n    /**\\n     * @notice Return true if the given domain / router is the address of a remote Application Router\\n     * @param _domain The domain of the potential remote Application Router\\n     * @param _address The address of the potential remote Application Router\\n     */\\n    function _isRemoteRouter(\\n        uint32 _domain,\\n        bytes32 _address\\n    ) internal view returns (bool) {\\n        return routers(_domain) == _address;\\n    }\\n\\n    /**\\n     * @notice Assert that the given domain has a Application Router registered and return its address\\n     * @param _domain The domain of the chain for which to get the Application Router\\n     * @return _router The address of the remote Application Router on _domain\\n     */\\n    function _mustHaveRemoteRouter(\\n        uint32 _domain\\n    ) internal view returns (bytes32) {\\n        (bool contained, bytes32 _router) = _routers.tryGet(_domain);\\n        if (contained) {\\n            return _router;\\n        }\\n        revert(_domainNotFoundError(_domain));\\n    }\\n\\n    function _domainNotFoundError(\\n        uint32 _domain\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"No router enrolled for domain: \\\",\\n                _domain.toString()\\n            );\\n    }\\n\\n    function _Router_dispatch(\\n        uint32 _destinationDomain,\\n        uint256 _value,\\n        bytes memory _messageBody,\\n        bytes memory _hookMetadata,\\n        address _hook\\n    ) internal returns (bytes32) {\\n        bytes32 _router = _mustHaveRemoteRouter(_destinationDomain);\\n        return\\n            mailbox.dispatch{value: _value}(\\n                _destinationDomain,\\n                _router,\\n                _messageBody,\\n                _hookMetadata,\\n                IPostDispatchHook(_hook)\\n            );\\n    }\\n\\n    /**\\n     * DEPRECATED: Use `_Router_dispatch` instead\\n     * @dev For backward compatibility with v2 client contracts\\n     */\\n    function _dispatch(\\n        uint32 _destinationDomain,\\n        bytes memory _messageBody\\n    ) internal returns (bytes32) {\\n        return\\n            _Router_dispatch(\\n                _destinationDomain,\\n                msg.value,\\n                _messageBody,\\n                \\\"\\\",\\n                address(hook)\\n            );\\n    }\\n\\n    function _Router_quoteDispatch(\\n        uint32 _destinationDomain,\\n        bytes memory _messageBody,\\n        bytes memory _hookMetadata,\\n        address _hook\\n    ) internal view returns (uint256) {\\n        bytes32 _router = _mustHaveRemoteRouter(_destinationDomain);\\n        return\\n            mailbox.quoteDispatch(\\n                _destinationDomain,\\n                _router,\\n                _messageBody,\\n                _hookMetadata,\\n                IPostDispatchHook(_hook)\\n            );\\n    }\\n\\n    /**\\n     * DEPRECATED: Use `_Router_quoteDispatch` instead\\n     * @dev For backward compatibility with v2 client contracts\\n     */\\n    function _quoteDispatch(\\n        uint32 _destinationDomain,\\n        bytes memory _messageBody\\n    ) internal view returns (uint256) {\\n        return\\n            _Router_quoteDispatch(\\n                _destinationDomain,\\n                _messageBody,\\n                \\\"\\\",\\n                address(hook)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf77b69f100a3dbd4ed9a24863890c2931c1cf5b87f8acd06dd2ebf7a7b039fe0\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/hooks/libs/StandardHookMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\n/**\\n * Format of metadata:\\n *\\n * [0:2] variant\\n * [2:34] msg.value\\n * [34:66] Gas limit for message (IGP)\\n * [66:86] Refund address for message (IGP)\\n * [86:] Custom metadata\\n */\\nlibrary StandardHookMetadata {\\n    struct Metadata {\\n        uint16 variant;\\n        uint256 msgValue;\\n        uint256 gasLimit;\\n        address refundAddress;\\n    }\\n\\n    uint8 private constant VARIANT_OFFSET = 0;\\n    uint8 private constant MSG_VALUE_OFFSET = 2;\\n    uint8 private constant GAS_LIMIT_OFFSET = 34;\\n    uint8 private constant REFUND_ADDRESS_OFFSET = 66;\\n    uint256 private constant MIN_METADATA_LENGTH = 86;\\n\\n    uint16 public constant VARIANT = 1;\\n\\n    /**\\n     * @notice Returns the variant of the metadata.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @return variant of the metadata as uint8.\\n     */\\n    function variant(bytes calldata _metadata) internal pure returns (uint16) {\\n        if (_metadata.length < VARIANT_OFFSET + 2) return 0;\\n        return uint16(bytes2(_metadata[VARIANT_OFFSET:VARIANT_OFFSET + 2]));\\n    }\\n\\n    /**\\n     * @notice Returns the specified value for the message.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @param _default Default fallback value.\\n     * @return Value for the message as uint256.\\n     */\\n    function msgValue(\\n        bytes calldata _metadata,\\n        uint256 _default\\n    ) internal pure returns (uint256) {\\n        if (_metadata.length < MSG_VALUE_OFFSET + 32) return _default;\\n        return\\n            uint256(bytes32(_metadata[MSG_VALUE_OFFSET:MSG_VALUE_OFFSET + 32]));\\n    }\\n\\n    /**\\n     * @notice Returns the specified gas limit for the message.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @param _default Default fallback gas limit.\\n     * @return Gas limit for the message as uint256.\\n     */\\n    function gasLimit(\\n        bytes calldata _metadata,\\n        uint256 _default\\n    ) internal pure returns (uint256) {\\n        if (_metadata.length < GAS_LIMIT_OFFSET + 32) return _default;\\n        return\\n            uint256(bytes32(_metadata[GAS_LIMIT_OFFSET:GAS_LIMIT_OFFSET + 32]));\\n    }\\n\\n    /**\\n     * @notice Returns the specified refund address for the message.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @param _default Default fallback refund address.\\n     * @return Refund address for the message as address.\\n     */\\n    function refundAddress(\\n        bytes calldata _metadata,\\n        address _default\\n    ) internal pure returns (address) {\\n        if (_metadata.length < REFUND_ADDRESS_OFFSET + 20) return _default;\\n        return\\n            address(\\n                bytes20(\\n                    _metadata[REFUND_ADDRESS_OFFSET:REFUND_ADDRESS_OFFSET + 20]\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns any custom metadata.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @return Custom metadata.\\n     */\\n    function getCustomMetadata(\\n        bytes calldata _metadata\\n    ) internal pure returns (bytes calldata) {\\n        if (_metadata.length < MIN_METADATA_LENGTH) return _metadata[0:0];\\n        return _metadata[MIN_METADATA_LENGTH:];\\n    }\\n\\n    /**\\n     * @notice Formats the specified gas limit and refund address into standard hook metadata.\\n     * @param _msgValue msg.value for the message.\\n     * @param _gasLimit Gas limit for the message.\\n     * @param _refundAddress Refund address for the message.\\n     * @param _customMetadata Additional metadata to include in the standard hook metadata.\\n     * @return ABI encoded standard hook metadata.\\n     */\\n    function formatMetadata(\\n        uint256 _msgValue,\\n        uint256 _gasLimit,\\n        address _refundAddress,\\n        bytes memory _customMetadata\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                VARIANT,\\n                _msgValue,\\n                _gasLimit,\\n                _refundAddress,\\n                _customMetadata\\n            );\\n    }\\n\\n    /**\\n     * @notice Formats the specified gas limit and refund address into standard hook metadata.\\n     * @param _msgValue msg.value for the message.\\n     * @return ABI encoded standard hook metadata.\\n     */\\n    function overrideMsgValue(\\n        uint256 _msgValue\\n    ) internal view returns (bytes memory) {\\n        return formatMetadata(_msgValue, uint256(0), msg.sender, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Formats the specified gas limit and refund address into standard hook metadata.\\n     * @param _gasLimit Gas limit for the message.\\n     * @return ABI encoded standard hook metadata.\\n     */\\n    function overrideGasLimit(\\n        uint256 _gasLimit\\n    ) internal view returns (bytes memory) {\\n        return formatMetadata(uint256(0), _gasLimit, msg.sender, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Formats the specified refund address into standard hook metadata.\\n     * @param _refundAddress Refund address for the message.\\n     * @return ABI encoded standard hook metadata.\\n     */\\n    function overrideRefundAddress(\\n        address _refundAddress\\n    ) internal pure returns (bytes memory) {\\n        return formatMetadata(uint256(0), uint256(0), _refundAddress, \\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x28e8be5b70f6b5b7c6a52c4906635639ae5ef3fe2ac970b7c30299e939b38e42\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IInterchainSecurityModule {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        LEGACY_MULTISIG,\\n        MERKLE_ROOT_MULTISIG,\\n        MESSAGE_ID_MULTISIG,\\n        NULL, // used with relayer carrying no metadata\\n        CCIP_READ,\\n        ARB_L2_TO_L1,\\n        WEIGHTED_MERKLE_ROOT_MULTISIG,\\n        WEIGHTED_MESSAGE_ID_MULTISIG,\\n        OP_L2_TO_L1\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8);\\n\\n    /**\\n     * @notice Defines a security model responsible for verifying interchain\\n     * messages based on the provided metadata.\\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\\n     * the security model encoded by the module (e.g. validator signatures)\\n     * @param _message Hyperlane encoded interchain message\\n     * @return True if the message was verified\\n     */\\n    function verify(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external returns (bool);\\n}\\n\\ninterface ISpecifiesInterchainSecurityModule {\\n    function interchainSecurityModule()\\n        external\\n        view\\n        returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0x1996b75eef35e7769ea2c6e76d4e8ae62a8db6176b1d0b5c5d2e9fcb0c237c9a\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {IInterchainSecurityModule} from \\\"./IInterchainSecurityModule.sol\\\";\\nimport {IPostDispatchHook} from \\\"./hooks/IPostDispatchHook.sol\\\";\\n\\ninterface IMailbox {\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param sender The address that dispatched the message\\n     * @param destination The destination domain of the message\\n     * @param recipient The message recipient address on `destination`\\n     * @param message Raw bytes of message\\n     */\\n    event Dispatch(\\n        address indexed sender,\\n        uint32 indexed destination,\\n        bytes32 indexed recipient,\\n        bytes message\\n    );\\n\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param messageId The unique message identifier\\n     */\\n    event DispatchId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is processed\\n     * @param messageId The unique message identifier\\n     */\\n    event ProcessId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is delivered\\n     * @param origin The origin domain of the message\\n     * @param sender The message sender address on `origin`\\n     * @param recipient The address that handled the message\\n     */\\n    event Process(\\n        uint32 indexed origin,\\n        bytes32 indexed sender,\\n        address indexed recipient\\n    );\\n\\n    function localDomain() external view returns (uint32);\\n\\n    function delivered(bytes32 messageId) external view returns (bool);\\n\\n    function defaultIsm() external view returns (IInterchainSecurityModule);\\n\\n    function defaultHook() external view returns (IPostDispatchHook);\\n\\n    function requiredHook() external view returns (IPostDispatchHook);\\n\\n    function latestDispatchedId() external view returns (bytes32);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata defaultHookMetadata\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata defaultHookMetadata\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external view returns (uint256 fee);\\n\\n    function process(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    function recipientIsm(\\n        address recipient\\n    ) external view returns (IInterchainSecurityModule module);\\n}\\n\",\"keccak256\":\"0x9cd728ba304279775818f8c7b4c02f8c5dd2b28e051ec466dbe36129be01a6ee\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IMessageRecipient {\\n    function handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes calldata _message\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x145e8332a91295a710deb3cb1ab689144262ef6ec66d9570c600b778e9dd964d\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/hooks/IPostDispatchHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\ninterface IPostDispatchHook {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        MERKLE_TREE,\\n        INTERCHAIN_GAS_PAYMASTER,\\n        FALLBACK_ROUTING,\\n        ID_AUTH_ISM,\\n        PAUSABLE,\\n        PROTOCOL_FEE,\\n        LAYER_ZERO_V1,\\n        RATE_LIMITED,\\n        ARB_L2_TO_L1,\\n        OP_L2_TO_L1\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of hook\\n     */\\n    function hookType() external view returns (uint8);\\n\\n    /**\\n     * @notice Returns whether the hook supports metadata\\n     * @param metadata metadata\\n     * @return Whether the hook supports metadata\\n     */\\n    function supportsMetadata(\\n        bytes calldata metadata\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Post action after a message is dispatched via the Mailbox\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     */\\n    function postDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    /**\\n     * @notice Compute the payment required by the postDispatch call\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     * @return Quoted payment for the postDispatch call\\n     */\\n    function quoteDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb5df1226b2e73559f2577ef168b5f402df05b7d2bf6bd1d30baf44439aea537b\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/libs/EnumerableMapExtended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ External Imports ============\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// extends EnumerableMap with uint256 => bytes32 type\\n// modelled after https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.0/contracts/utils/structs/EnumerableMap.sol\\nlibrary EnumerableMapExtended {\\n    using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    struct UintToBytes32Map {\\n        EnumerableMap.Bytes32ToBytes32Map _inner;\\n    }\\n\\n    // ============ Library Functions ============\\n    function keys(\\n        UintToBytes32Map storage map\\n    ) internal view returns (uint256[] memory _keys) {\\n        uint256 _length = map._inner.length();\\n        _keys = new uint256[](_length);\\n        for (uint256 i = 0; i < _length; i++) {\\n            _keys[i] = uint256(map._inner._keys.at(i));\\n        }\\n    }\\n\\n    function uint32Keys(\\n        UintToBytes32Map storage map\\n    ) internal view returns (uint32[] memory _keys) {\\n        uint256[] memory uint256keys = keys(map);\\n        _keys = new uint32[](uint256keys.length);\\n        for (uint256 i = 0; i < uint256keys.length; i++) {\\n            _keys[i] = uint32(uint256keys[i]);\\n        }\\n    }\\n\\n    function set(\\n        UintToBytes32Map storage map,\\n        uint256 key,\\n        bytes32 value\\n    ) internal {\\n        map._inner.set(bytes32(key), value);\\n    }\\n\\n    function get(\\n        UintToBytes32Map storage map,\\n        uint256 key\\n    ) internal view returns (bytes32) {\\n        return map._inner.get(bytes32(key));\\n    }\\n\\n    function tryGet(\\n        UintToBytes32Map storage map,\\n        uint256 key\\n    ) internal view returns (bool, bytes32) {\\n        return map._inner.tryGet(bytes32(key));\\n    }\\n\\n    function remove(\\n        UintToBytes32Map storage map,\\n        uint256 key\\n    ) internal returns (bool) {\\n        return map._inner.remove(bytes32(key));\\n    }\\n\\n    function contains(\\n        UintToBytes32Map storage map,\\n        uint256 key\\n    ) internal view returns (bool) {\\n        return map._inner.contains(bytes32(key));\\n    }\\n\\n    function length(\\n        UintToBytes32Map storage map\\n    ) internal view returns (uint256) {\\n        return map._inner.length();\\n    }\\n\\n    function at(\\n        UintToBytes32Map storage map,\\n        uint256 index\\n    ) internal view returns (uint256, bytes32) {\\n        (bytes32 key, bytes32 value) = map._inner.at(index);\\n        return (uint256(key), value);\\n    }\\n}\\n\",\"keccak256\":\"0xbd661cdeba756caf35191b71a85461a9ff79c047ec98ec05063748dfc0419595\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/libs/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {TypeCasts} from \\\"./TypeCasts.sol\\\";\\n\\n/**\\n * @title Hyperlane Message Library\\n * @notice Library for formatted messages used by Mailbox\\n **/\\nlibrary Message {\\n    using TypeCasts for bytes32;\\n\\n    uint256 private constant VERSION_OFFSET = 0;\\n    uint256 private constant NONCE_OFFSET = 1;\\n    uint256 private constant ORIGIN_OFFSET = 5;\\n    uint256 private constant SENDER_OFFSET = 9;\\n    uint256 private constant DESTINATION_OFFSET = 41;\\n    uint256 private constant RECIPIENT_OFFSET = 45;\\n    uint256 private constant BODY_OFFSET = 77;\\n\\n    /**\\n     * @notice Returns formatted (packed) Hyperlane message with provided fields\\n     * @dev This function should only be used in memory message construction.\\n     * @param _version The version of the origin and destination Mailboxes\\n     * @param _nonce A nonce to uniquely identify the message on its origin chain\\n     * @param _originDomain Domain of origin chain\\n     * @param _sender Address of sender as bytes32\\n     * @param _destinationDomain Domain of destination chain\\n     * @param _recipient Address of recipient on destination chain as bytes32\\n     * @param _messageBody Raw bytes of message body\\n     * @return Formatted message\\n     */\\n    function formatMessage(\\n        uint8 _version,\\n        uint32 _nonce,\\n        uint32 _originDomain,\\n        bytes32 _sender,\\n        uint32 _destinationDomain,\\n        bytes32 _recipient,\\n        bytes calldata _messageBody\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _version,\\n                _nonce,\\n                _originDomain,\\n                _sender,\\n                _destinationDomain,\\n                _recipient,\\n                _messageBody\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the message ID.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return ID of `_message`\\n     */\\n    function id(bytes memory _message) internal pure returns (bytes32) {\\n        return keccak256(_message);\\n    }\\n\\n    /**\\n     * @notice Returns the message version.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Version of `_message`\\n     */\\n    function version(bytes calldata _message) internal pure returns (uint8) {\\n        return uint8(bytes1(_message[VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message nonce.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Nonce of `_message`\\n     */\\n    function nonce(bytes calldata _message) internal pure returns (uint32) {\\n        return uint32(bytes4(_message[NONCE_OFFSET:ORIGIN_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message origin domain.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Origin domain of `_message`\\n     */\\n    function origin(bytes calldata _message) internal pure returns (uint32) {\\n        return uint32(bytes4(_message[ORIGIN_OFFSET:SENDER_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message sender as bytes32.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Sender of `_message` as bytes32\\n     */\\n    function sender(bytes calldata _message) internal pure returns (bytes32) {\\n        return bytes32(_message[SENDER_OFFSET:DESTINATION_OFFSET]);\\n    }\\n\\n    /**\\n     * @notice Returns the message sender as address.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Sender of `_message` as address\\n     */\\n    function senderAddress(\\n        bytes calldata _message\\n    ) internal pure returns (address) {\\n        return sender(_message).bytes32ToAddress();\\n    }\\n\\n    /**\\n     * @notice Returns the message destination domain.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Destination domain of `_message`\\n     */\\n    function destination(\\n        bytes calldata _message\\n    ) internal pure returns (uint32) {\\n        return uint32(bytes4(_message[DESTINATION_OFFSET:RECIPIENT_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message recipient as bytes32.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Recipient of `_message` as bytes32\\n     */\\n    function recipient(\\n        bytes calldata _message\\n    ) internal pure returns (bytes32) {\\n        return bytes32(_message[RECIPIENT_OFFSET:BODY_OFFSET]);\\n    }\\n\\n    /**\\n     * @notice Returns the message recipient as address.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Recipient of `_message` as address\\n     */\\n    function recipientAddress(\\n        bytes calldata _message\\n    ) internal pure returns (address) {\\n        return recipient(_message).bytes32ToAddress();\\n    }\\n\\n    /**\\n     * @notice Returns the message body.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Body of `_message`\\n     */\\n    function body(\\n        bytes calldata _message\\n    ) internal pure returns (bytes calldata) {\\n        return bytes(_message[BODY_OFFSET:]);\\n    }\\n}\\n\",\"keccak256\":\"0x5319af5ade07bcb021d6373f0713f24f34431def78cda16fea6755f580fb5e78\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/libs/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\nlibrary TypeCasts {\\n    // alignment preserving cast\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    // alignment preserving cast\\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n        require(\\n            uint256(_buf) <= uint256(type(uint160).max),\\n            \\\"TypeCasts: bytes32ToAddress overflow\\\"\\n        );\\n        return address(uint160(uint256(_buf)));\\n    }\\n}\\n\",\"keccak256\":\"0xa4329f368c22062ccc725593c5c552796ce923cf66191cb9681f4f17fea8631f\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/token/libs/TokenMessage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nlibrary TokenMessage {\\n    function format(\\n        bytes32 _recipient,\\n        uint256 _amount,\\n        bytes memory _metadata\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_recipient, _amount, _metadata);\\n    }\\n\\n    function recipient(bytes calldata message) internal pure returns (bytes32) {\\n        return bytes32(message[0:32]);\\n    }\\n\\n    function amount(bytes calldata message) internal pure returns (uint256) {\\n        return uint256(bytes32(message[32:64]));\\n    }\\n\\n    // alias for ERC721\\n    function tokenId(bytes calldata message) internal pure returns (uint256) {\\n        return amount(message);\\n    }\\n\\n    function metadata(\\n        bytes calldata message\\n    ) internal pure returns (bytes calldata) {\\n        return message[64:];\\n    }\\n}\\n\",\"keccak256\":\"0x0bd8b076985c44231f6675f3bc968db8f8bd471af6ed919fb06a8f5d3bc8be0a\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/token/libs/TokenRouter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {IPostDispatchHook} from \\\"../../interfaces/hooks/IPostDispatchHook.sol\\\";\\nimport {GasRouter} from \\\"../../client/GasRouter.sol\\\";\\nimport {MailboxClient} from \\\"../../client/MailboxClient.sol\\\";\\nimport {TypeCasts} from \\\"../../libs/TypeCasts.sol\\\";\\nimport {TokenMessage} from \\\"./TokenMessage.sol\\\";\\n\\n/**\\n * @title Hyperlane Token Router that extends Router with abstract token (ERC20/ERC721) remote transfer functionality.\\n * @author Abacus Works\\n */\\nabstract contract TokenRouter is GasRouter {\\n    using TypeCasts for bytes32;\\n    using TypeCasts for address;\\n    using TokenMessage for bytes;\\n\\n    /**\\n     * @dev Emitted on `transferRemote` when a transfer message is dispatched.\\n     * @param destination The identifier of the destination chain.\\n     * @param recipient The address of the recipient on the destination chain.\\n     * @param amount The amount of tokens burnt on the origin chain.\\n     */\\n    event SentTransferRemote(\\n        uint32 indexed destination,\\n        bytes32 indexed recipient,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on `_handle` when a transfer message is processed.\\n     * @param origin The identifier of the origin chain.\\n     * @param recipient The address of the recipient on the destination chain.\\n     * @param amount The amount of tokens minted on the destination chain.\\n     */\\n    event ReceivedTransferRemote(\\n        uint32 indexed origin,\\n        bytes32 indexed recipient,\\n        uint256 amount\\n    );\\n\\n    constructor(address _mailbox) GasRouter(_mailbox) {}\\n\\n    /**\\n     * @notice Transfers `_amountOrId` token to `_recipient` on `_destination` domain.\\n     * @dev Delegates transfer logic to `_transferFromSender` implementation.\\n     * @dev Emits `SentTransferRemote` event on the origin chain.\\n     * @param _destination The identifier of the destination chain.\\n     * @param _recipient The address of the recipient on the destination chain.\\n     * @param _amountOrId The amount or identifier of tokens to be sent to the remote recipient.\\n     * @return messageId The identifier of the dispatched message.\\n     */\\n    function transferRemote(\\n        uint32 _destination,\\n        bytes32 _recipient,\\n        uint256 _amountOrId\\n    ) external payable virtual returns (bytes32 messageId) {\\n        return\\n            _transferRemote(_destination, _recipient, _amountOrId, msg.value);\\n    }\\n\\n    /**\\n     * @notice Transfers `_amountOrId` token to `_recipient` on `_destination` domain with a specified hook\\n     * @dev Delegates transfer logic to `_transferFromSender` implementation.\\n     * @dev The metadata is the token metadata, and is DIFFERENT than the hook metadata.\\n     * @dev Emits `SentTransferRemote` event on the origin chain.\\n     * @param _destination The identifier of the destination chain.\\n     * @param _recipient The address of the recipient on the destination chain.\\n     * @param _amountOrId The amount or identifier of tokens to be sent to the remote recipient.\\n     * @param _hookMetadata The metadata passed into the hook\\n     * @param _hook The post dispatch hook to be called by the Mailbox\\n     * @return messageId The identifier of the dispatched message.\\n     */\\n    function transferRemote(\\n        uint32 _destination,\\n        bytes32 _recipient,\\n        uint256 _amountOrId,\\n        bytes calldata _hookMetadata,\\n        address _hook\\n    ) external payable virtual returns (bytes32 messageId) {\\n        return\\n            _transferRemote(\\n                _destination,\\n                _recipient,\\n                _amountOrId,\\n                msg.value,\\n                _hookMetadata,\\n                _hook\\n            );\\n    }\\n\\n    function _transferRemote(\\n        uint32 _destination,\\n        bytes32 _recipient,\\n        uint256 _amountOrId,\\n        uint256 _value\\n    ) internal returns (bytes32 messageId) {\\n        return\\n            _transferRemote(\\n                _destination,\\n                _recipient,\\n                _amountOrId,\\n                _value,\\n                _GasRouter_hookMetadata(_destination),\\n                address(hook)\\n            );\\n    }\\n\\n    function _transferRemote(\\n        uint32 _destination,\\n        bytes32 _recipient,\\n        uint256 _amountOrId,\\n        uint256 _value,\\n        bytes memory _hookMetadata,\\n        address _hook\\n    ) internal virtual returns (bytes32 messageId) {\\n        bytes memory _tokenMetadata = _transferFromSender(_amountOrId);\\n        bytes memory _tokenMessage = TokenMessage.format(\\n            _recipient,\\n            _amountOrId,\\n            _tokenMetadata\\n        );\\n\\n        messageId = _Router_dispatch(\\n            _destination,\\n            _value,\\n            _tokenMessage,\\n            _hookMetadata,\\n            _hook\\n        );\\n\\n        emit SentTransferRemote(_destination, _recipient, _amountOrId);\\n    }\\n\\n    /**\\n     * @dev Should transfer `_amountOrId` of tokens from `msg.sender` to this token router.\\n     * @dev Called by `transferRemote` before message dispatch.\\n     * @dev Optionally returns `metadata` associated with the transfer to be passed in message.\\n     */\\n    function _transferFromSender(\\n        uint256 _amountOrId\\n    ) internal virtual returns (bytes memory metadata);\\n\\n    /**\\n     * @notice Returns the balance of `account` on this token router.\\n     * @param account The address to query the balance of.\\n     * @return The balance of `account`.\\n     */\\n    function balanceOf(address account) external virtual returns (uint256);\\n\\n    /**\\n     * @dev Mints tokens to recipient when router receives transfer message.\\n     * @dev Emits `ReceivedTransferRemote` event on the destination chain.\\n     * @param _origin The identifier of the origin chain.\\n     * @param _message The encoded remote transfer message containing the recipient address and amount.\\n     */\\n    function _handle(\\n        uint32 _origin,\\n        bytes32,\\n        bytes calldata _message\\n    ) internal virtual override {\\n        bytes32 recipient = _message.recipient();\\n        uint256 amount = _message.amount();\\n        bytes calldata metadata = _message.metadata();\\n        _transferTo(recipient.bytes32ToAddress(), amount, metadata);\\n        emit ReceivedTransferRemote(_origin, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Should transfer `_amountOrId` of tokens from this token router to `_recipient`.\\n     * @dev Called by `handle` after message decoding.\\n     * @dev Optionally handles `metadata` associated with transfer passed in message.\\n     */\\n    function _transferTo(\\n        address _recipient,\\n        uint256 _amountOrId,\\n        bytes calldata metadata\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x26aff45ac4b0a29f965dcc98d341aa6c27957d8b858e94c00480dc1cd05a8ae0\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xed79d68fc69539630aab88fc02b0be8ebfc97cbbda9a4ffabcf7551d7b04fc0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8b8d73aa1f554bbe7ff13b46e07ffaeb71fd6df32f677b0a498a0af980ba2115\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x7ebfe2422bc571599c2ec20577d7848e1e7a0acf85fa7c2d9636618bbbdf6fca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/ExampleHypERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {TokenRouter} from \\\"@hyperlane-xyz/core/contracts/token/libs/TokenRouter.sol\\\";\\nimport {ERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport {ERC1155SupplyUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\n\\n/**\\n * @title Unofficial and UNAUDITED Hyperlane ERC1155 Token Router\\n * @notice Enables cross-chain ERC1155 token transfers using Hyperlane's messaging protocol\\n * @dev Compatible with existing Hyperlane protocol deployments by packing tokenId and amount\\n * into a single uint256. Uses standard TokenRouter interface without modifications.\\n * Limitation: Both tokenId and amount must be <= type(uint128).max\\n */\\n\\ncontract HypERC1155 is ERC1155SupplyUpgradeable, TokenRouter {\\n    string private _name;\\n    string private _symbol;\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    error InsufficientBalance(address from, uint128 tokenId, uint128 amount);\\n    error TokenTransferLengthMismatch(uint128 tokenIdLength, uint128 amountLength);\\n    error TokenTransferValueTooLarge(uint256 value);\\n    error EmptyArrays();\\n    error UseERC1155BalanceOf();\\n    error ZeroAmount();\\n\\n    constructor(address _mailbox) TokenRouter(_mailbox) {}\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155Upgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function initialize(\\n        string memory _uri,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        address _hook,\\n        address _interchainSecurityModule,\\n        address _owner\\n    ) external initializer {\\n        __ERC1155_init(_uri);\\n        __ERC1155Supply_init();\\n        _MailboxClient_initialize(_hook, _interchainSecurityModule, _owner);\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n    }\\n\\n    function mint(address to, uint256 id, uint256 amount) external onlyOwner {\\n        _mint(to, id, amount, \\\"\\\");\\n    }\\n\\n    function setURI(uint128 tokenId, string memory newuri) external onlyOwner {\\n        _tokenURIs[tokenId] = newuri;\\n    }\\n\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        if (bytes(tokenURI).length > 0) {\\n            return tokenURI;\\n        }\\n\\n        return super.uri(tokenId);\\n    }\\n\\n    function transferRemote(\\n        uint32 destination,\\n        bytes32 recipient,\\n        uint128 tokenId,\\n        uint128 amount\\n    ) external payable returns (bytes32) {\\n        uint256 packed = _packValues(tokenId, amount);\\n        return this.transferRemote(destination, recipient, packed);\\n    }\\n\\n    function _transferFromSender(uint256 packed) internal virtual override returns (bytes memory) {\\n        (uint128 tokenId, uint128 amount) = _unpackValues(packed);\\n\\n        if (balanceOf(msg.sender, tokenId) < amount) {\\n            revert InsufficientBalance(msg.sender, tokenId, amount);\\n        }\\n\\n        _burn(msg.sender, tokenId, amount);\\n        return \\\"\\\";\\n    }\\n\\n    function transferRemoteBatch(\\n        uint32 destination,\\n        bytes32 recipient,\\n        uint128[] calldata tokenIds,\\n        uint128[] calldata amounts\\n    ) external payable returns (uint128[] memory remainingIds, uint128[] memory remainingAmounts) {\\n        if (tokenIds.length == 0 || amounts.length == 0) revert EmptyArrays();\\n\\n        if (tokenIds.length != amounts.length) {\\n            revert TokenTransferLengthMismatch(uint128(tokenIds.length), uint128(amounts.length));\\n        }\\n\\n        for (uint128 i = 0; i < tokenIds.length; i++) {\\n            try\\n                this.transferRemote(destination, recipient, _packValues(tokenIds[i], amounts[i]))\\n            {} catch {\\n                uint128 remaining = uint128(tokenIds.length) - i;\\n                remainingIds = new uint128[](remaining);\\n                remainingAmounts = new uint128[](remaining);\\n                for (uint128 j = 0; j < remaining; j++) {\\n                    remainingIds[j] = tokenIds[i + j];\\n                    remainingAmounts[j] = amounts[i + j];\\n                }\\n                return (remainingIds, remainingAmounts);\\n            }\\n        }\\n        return (new uint128[](0), new uint128[](0));\\n    }\\n\\n    function _transferTo(\\n        address recipient,\\n        uint256 packed,\\n        bytes calldata\\n    ) internal virtual override {\\n        (uint128 tokenId, uint128 amount) = _unpackValues(packed);\\n        _mint(recipient, tokenId, amount, \\\"\\\");\\n    }\\n\\n    function _packValues(uint128 tokenId, uint128 amount) internal pure returns (uint256) {\\n        return (tokenId << 128) | amount;\\n    }\\n\\n    function _unpackValues(uint256 packed) internal pure returns (uint128 tokenId, uint128 amount) {\\n        tokenId = uint128(packed >> 128);\\n        amount = uint128(packed & type(uint128).max);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155SupplyUpgradeable) {\\n        for (uint128 i = 0; i < ids.length; i++) {\\n            if (ids[i] > type(uint128).max) revert TokenTransferValueTooLarge(ids[i]);\\n            if (amounts[i] > type(uint128).max) revert TokenTransferValueTooLarge(amounts[i]);\\n        }\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    function balanceOf(address) public pure override(TokenRouter) returns (uint256) {\\n        revert UseERC1155BalanceOf();\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n}\\n\",\"keccak256\":\"0x2b657601c494de74b289f4a30e3a555174b38fc0f7cf06268a6c81566b77fc11\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516148e33803806148e383398101604081905261002f9161016c565b80808080806001600160a01b0381163b61008f5760405162461bcd60e51b815260206004820152601e60248201527f4d61696c626f78436c69656e743a20696e76616c6964206d61696c626f780000604482015260640160405180910390fd5b6001600160a01b03821660808190526040805163234d8e3d60e21b81529051638d3638f4916004808201926020929091908290030181865afa1580156100d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fd919061019c565b63ffffffff1660a05261010f3361011a565b5050505050506101c2565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006020828403121561017e57600080fd5b81516001600160a01b038116811461019557600080fd5b9392505050565b6000602082840312156101ae57600080fd5b815163ffffffff8116811461019557600080fd5b60805160a0516146e76101fc60003960006105d601526000818161074801528181610f1c01528181612baf0152612ec501526146e76000f3fe6080604052600436106102c55760003560e01c80637f5a7c7b11610179578063bd85b039116100d6578063efae508a1161008a578063f2ed8c5311610064578063f2ed8c5314610846578063f2fde38b14610866578063f857e60b1461088657600080fd5b8063efae508a146107f3578063f158133f14610813578063f242432a1461082657600080fd5b8063de523cf3116100bb578063de523cf31461076a578063e9198bf91461078a578063e985e9c5146107aa57600080fd5b8063bd85b03914610709578063d5438eae1461073657600080fd5b806395d89b411161012d578063a22cb46511610112578063a22cb465146106a9578063b1bd6436146106c9578063b49c53a7146106e957600080fd5b806395d89b41146106745780639630c8ac1461068957600080fd5b80638d3638f41161015e5780638d3638f4146105c45780638da5cb5b1461060d57806393c448471461062b57600080fd5b80637f5a7c7b1461057957806381b4e8b4146105b157600080fd5b806349d462ef11610227578063657e1fe2116101db578063715018a6116101c0578063715018a61461051657806371a15b381461052b578063775313a11461054b57600080fd5b8063657e1fe2146104d557806370a08231146104f657600080fd5b80634f558e791161020c5780634f558e791461048057806351debffc146104af57806356d5d475146104c257600080fd5b806349d462ef146104335780634e1273f41461045357600080fd5b8063156e29f61161027e5780632eb2c2d6116102635780632eb2c2d6146103d15780633dfd3873146103f1578063440df4f41461041157600080fd5b8063156e29f6146103915780632ead72f6146103b157600080fd5b806306fdde03116102af57806306fdde031461032d5780630e72cc061461034f5780630e89341c1461037157600080fd5b8062fdd58e146102ca57806301ffc9a7146102fd575b600080fd5b3480156102d657600080fd5b506102ea6102e53660046136d7565b6108a6565b6040519081526020015b60405180910390f35b34801561030957600080fd5b5061031d610318366004613717565b610954565b60405190151581526020016102f4565b34801561033957600080fd5b5061034261095f565b6040516102f49190613784565b34801561035b57600080fd5b5061036f61036a366004613797565b6109f2565b005b34801561037d57600080fd5b5061034261038c3660046137b2565b610ad9565b34801561039d57600080fd5b5061036f6103ac3660046137cb565b610b98565b3480156103bd57600080fd5b506102ea6103cc366004613812565b610bc0565b3480156103dd57600080fd5b5061036f6103ec366004613987565b610be0565b3480156103fd57600080fd5b5061036f61040c366004613797565b610c82565b34801561041d57600080fd5b50610426610d61565b6040516102f49190613a3d565b34801561043f57600080fd5b5061036f61044e366004613a86565b610d73565b34801561045f57600080fd5b5061047361046e366004613aa2565b610d89565b6040516102f49190613bb3565b34801561048c57600080fd5b5061031d61049b3660046137b2565b600090815260976020526040902054151590565b6102ea6104bd366004613c08565b610ebf565b61036f6104d0366004613c7f565b610f11565b6104e86104e3366004613d1e565b61103d565b6040516102f4929190613de8565b34801561050257600080fd5b506102ea610511366004613797565b6113b4565b34801561052257600080fd5b5061036f6113e8565b34801561053757600080fd5b5061036f610546366004613e0d565b6113fc565b34801561055757600080fd5b506102ea610566366004613812565b6101606020526000908152604090205481565b34801561058557600080fd5b5060fb54610599906001600160a01b031681565b6040516001600160a01b0390911681526020016102f4565b6102ea6105bf366004613e4f565b611457565b3480156105d057600080fd5b506105f87f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016102f4565b34801561061957600080fd5b5060c9546001600160a01b0316610599565b34801561063757600080fd5b506103426040518060400160405280600581526020017f352e382e3300000000000000000000000000000000000000000000000000000081525081565b34801561068057600080fd5b50610342611465565b34801561069557600080fd5b5061036f6106a4366004613e6d565b611475565b3480156106b557600080fd5b5061036f6106c4366004613f26565b6115cb565b3480156106d557600080fd5b5061036f6106e4366004613f62565b6115d6565b3480156106f557600080fd5b5061036f610704366004613a86565b611647565b34801561071557600080fd5b506102ea6107243660046137b2565b60009081526097602052604090205490565b34801561074257600080fd5b506105997f000000000000000000000000000000000000000000000000000000000000000081565b34801561077657600080fd5b5060fc54610599906001600160a01b031681565b34801561079657600080fd5b5061036f6107a5366004613fd9565b611659565b3480156107b657600080fd5b5061031d6107c536600461403e565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b3480156107ff57600080fd5b5061036f61080e366004613812565b61171e565b6102ea610821366004614088565b611732565b34801561083257600080fd5b5061036f6108413660046140d5565b6117da565b34801561085257600080fd5b506102ea610861366004613812565b611875565b34801561087257600080fd5b5061036f610881366004613797565b61189f565b34801561089257600080fd5b5061036f6108a136600461412e565b61192c565b60006001600160a01b0383166109295760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b600061094e82611957565b6060610161805461096f90614172565b80601f016020809104026020016040519081016040528092919081815260200182805461099b90614172565b80156109e85780601f106109bd576101008083540402835291602001916109e8565b820191906000526020600020905b8154815290600101906020018083116109cb57829003601f168201915b5050505050905090565b806001600160a01b0381163b151580610a1257506001600160a01b038116155b610a6e5760405162461bcd60e51b815260206004820152602760248201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060448201526673657474696e6760c81b6064820152608401610920565b610a766119f2565b60fc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527fc47cbcc588c67679e52261c45cc315e56562f8d0ccaba16facb9093ff9498799906020015b60405180910390a15050565b60008181526101636020526040812080546060929190610af890614172565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2490614172565b8015610b715780601f10610b4657610100808354040283529160200191610b71565b820191906000526020600020905b815481529060010190602001808311610b5457829003601f168201915b50505050509050600081511115610b885792915050565b610b9183611a4c565b9392505050565b610ba06119f2565b610bbb83838360405180602001604052806000815250611ae0565b505050565b600080610bd861012d63ffffffff80861690611c1816565b949350505050565b6001600160a01b038516331480610bfc5750610bfc85336107c5565b610c6e5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610920565b610c7b8585858585611c31565b5050505050565b806001600160a01b0381163b151580610ca257506001600160a01b038116155b610cfe5760405162461bcd60e51b815260206004820152602760248201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060448201526673657474696e6760c81b6064820152608401610920565b610d066119f2565b60fb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527f4eab7b127c764308788622363ad3e9532de3dfba7845bd4f84c125a22544255a90602001610acd565b6060610d6e61012d611ea6565b905090565b610d7b6119f2565b610d858282611f57565b5050565b60608151835114610e025760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610920565b6000835167ffffffffffffffff811115610e1e57610e1e61382d565b604051908082528060200260200182016040528015610e47578160200160208202803683370190505b50905060005b8451811015610eb757610e92858281518110610e6b57610e6b6141ac565b6020026020010151858381518110610e8557610e856141ac565b60200260200101516108a6565b828281518110610ea457610ea46141ac565b6020908102919091010152600101610e4d565b509392505050565b6000610f068787873488888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250611fa6915050565b979650505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610faf5760405162461bcd60e51b815260206004820152602160248201527f4d61696c626f78436c69656e743a2073656e646572206e6f74206d61696c626f60448201527f78000000000000000000000000000000000000000000000000000000000000006064820152608401610920565b6000610fba8561201f565b90508381146110315760405162461bcd60e51b815260206004820152602560248201527f456e726f6c6c656420726f7574657220646f6573206e6f74206d61746368207360448201527f656e6465720000000000000000000000000000000000000000000000000000006064820152608401610920565b610c7b8585858561206b565b60608084158061104b575082155b15611082576040517fa600c81d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8483146110ce576040517f19608e390000000000000000000000000000000000000000000000000000000081526001600160801b03808716600483015284166024820152604401610920565b60005b6001600160801b03811686111561138e57306381b4e8b48a8a61115b8b8b6001600160801b038816818110611108576111086141ac565b905060200201602081019061111d91906141c2565b8a8a886001600160801b0316818110611138576111386141ac565b905060200201602081019061114d91906141c2565b6001600160801b0316919050565b6040516001600160e01b031960e086901b16815263ffffffff939093166004840152602483019190915260448201526064016020604051808303816000875af19250505080156111c8575060408051601f3d908101601f191682019092526111c5918101906141dd565b60015b61137b5760006111d8828861420c565b9050806001600160801b031667ffffffffffffffff8111156111fc576111fc61382d565b604051908082528060200260200182016040528015611225578160200160208202803683370190505b509350806001600160801b031667ffffffffffffffff81111561124a5761124a61382d565b604051908082528060200260200182016040528015611273578160200160208202803683370190505b50925060005b816001600160801b0316816001600160801b0316101561137357888861129f838661422b565b6001600160801b03168181106112b7576112b76141ac565b90506020020160208101906112cc91906141c2565b85826001600160801b0316815181106112e7576112e76141ac565b6001600160801b0390921660209283029190910190910152868661130b838661422b565b6001600160801b0316818110611323576113236141ac565b905060200201602081019061133891906141c2565b84826001600160801b031681518110611353576113536141ac565b6001600160801b0390921660209283029190910190910152600101611279565b5050506113a9565b50806113868161424a565b9150506110d1565b50506040805160008082526020820190815281830190925291505b965096945050505050565b60006040517facab90bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113f06119f2565b6113fa60006120f7565b565b6114046119f2565b8060005b818110156114515761143f848483818110611425576114256141ac565b905060200201602081019061143a9190613812565b612156565b61144a600182614275565b9050611408565b50505050565b6000610bd884848434612192565b6060610162805461096f90614172565b600054610100900460ff16158080156114955750600054600160ff909116105b806114af5750303b1580156114af575060005460ff166001145b6115215760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610920565b6000805460ff191660011790558015611544576000805461ff0019166101001790555b61154d876121be565b611555612232565b61156084848461229d565b61016161156d87826142cf565b5061016261157b86826142cf565b5080156115c2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b610d8533838361232b565b6115de6119f2565b60005b81811015610bbb576116358383838181106115fe576115fe6141ac565b6116149260206040909202019081019150613812565b848484818110611626576116266141ac565b90506040020160200135611f57565b611640600182614275565b90506115e1565b61164f6119f2565b610d85828261241f565b6116616119f2565b8281146116b05760405162461bcd60e51b815260206004820152600760248201527f216c656e677468000000000000000000000000000000000000000000000000006044820152606401610920565b8260005b81811015611716576117048686838181106116d1576116d16141ac565b90506020020160208101906116e69190613812565b8585848181106116f8576116f86141ac565b9050602002013561241f565b61170f600182614275565b90506116b4565b505050505050565b6117266119f2565b61172f81612156565b50565b6000806001600160801b0383166040517f81b4e8b400000000000000000000000000000000000000000000000000000000815263ffffffff88166004820152602481018790526044810182905290915030906381b4e8b4906064016020604051808303816000875af11580156117ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d091906141dd565b9695505050505050565b6001600160a01b0385163314806117f657506117f685336107c5565b6118685760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610920565b610c7b8585858585612436565b6040805160208101909152600080825260fb54909161094e918491906001600160a01b03166125f3565b6118a76119f2565b6001600160a01b0381166119235760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610920565b61172f816120f7565b6119346119f2565b6001600160801b038216600090815261016360205260409020610bbb82826142cf565b60006001600160e01b031982167fd9b67a260000000000000000000000000000000000000000000000000000000014806119ba57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061094e57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461094e565b60c9546001600160a01b031633146113fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610920565b606060678054611a5b90614172565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8790614172565b8015611ad45780601f10611aa957610100808354040283529160200191611ad4565b820191906000526020600020905b815481529060010190602001808311611ab757829003601f168201915b50505050509050919050565b6001600160a01b038416611b5c5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610920565b336000611b6885612609565b90506000611b7585612609565b9050611b8683600089858589612654565b60008681526065602090815260408083206001600160a01b038b16845290915281208054879290611bb8908490614275565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46115c283600089898989612763565b600080611c258484612908565b915091505b9250929050565b8151835114611ca85760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610920565b6001600160a01b038416611d0c5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610920565b33611d1b818787878787612654565b60005b8451811015611e40576000858281518110611d3b57611d3b6141ac565b602002602001015190506000858381518110611d5957611d596141ac565b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015611ded5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610920565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611e2c908490614275565b909155505060019093019250611d1e915050565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611e9092919061438e565b60405180910390a4611716818787878787612942565b60606000611eb383612a3e565b9050805167ffffffffffffffff811115611ecf57611ecf61382d565b604051908082528060200260200182016040528015611ef8578160200160208202803683370190505b50915060005b8151811015611f5057818181518110611f1957611f196141ac565b6020026020010151838281518110611f3357611f336141ac565b63ffffffff90921660209283029190910190910152600101611efe565b5050919050565b63ffffffff821660008181526101606020908152604091829020849055815192835282018390527fc3de732a98b24a2b5c6f67e8a7fb057ffc14046b83968a2c73e4148d2fba978b9101610acd565b600080611fb286612acf565b90506000611fc1888884612b70565b9050611fd08987838888612b9f565b9250878963ffffffff167fd229aacb94204188fe8042965fa6b269c62dc5818b21238779ab64bdd17efeec8960405161200b91815260200190565b60405180910390a350509695505050505050565b6000808061203861012d63ffffffff80871690611c1816565b915091508115612049579392505050565b61205284612c45565b60405162461bcd60e51b81526004016109209190613784565b60006120778383612c7c565b905060006120858484612c94565b90503660006120948686612ca4565b915091506120ac6120a485612cb4565b848484612d36565b838863ffffffff167fba20947a325f450d232530e5f5fce293e7963499d5309a07cee84a269f2f15a6856040516120e591815260200190565b60405180910390a35050505050505050565b60c980546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61216b61012d63ffffffff80841690612d6516565b61217482612c45565b90610d855760405162461bcd60e51b81526004016109209190613784565b60006121b5858585856121a48a612d71565b60fb546001600160a01b0316611fa6565b95945050505050565b600054610100900460ff166122295760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610920565b61172f81612d94565b600054610100900460ff166113fa5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610920565b600054610100900460ff166123085760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610920565b612310612e08565b61231983610c82565b612322826109f2565b610bbb816120f7565b816001600160a01b0316836001600160a01b0316036123b25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610920565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610d8561012d63ffffffff808516908490612e7b16565b6001600160a01b03841661249a5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610920565b3360006124a685612609565b905060006124b385612609565b90506124c3838989858589612654565b60008681526065602090815260408083206001600160a01b038c168452909152902054858110156125495760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610920565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612588908490614275565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46125e8848a8a8a8a8a612763565b505050505050505050565b6000610bd8848461260387612d71565b85612e86565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612643576126436141ac565b602090810291909101015292915050565b60005b8351816001600160801b03161015612754576001600160801b03801684826001600160801b03168151811061268e5761268e6141ac565b602002602001015111156126f45783816001600160801b0316815181106126b7576126b76141ac565b60200260200101516040517fcbaba7a300000000000000000000000000000000000000000000000000000000815260040161092091815260200190565b6001600160801b03801683826001600160801b031681518110612719576127196141ac565b602002602001015111156127425782816001600160801b0316815181106126b7576126b76141ac565b8061274c8161424a565b915050612657565b50611716868686868686612f1f565b6001600160a01b0384163b156117165760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906127a790899089908890889088906004016143b3565b6020604051808303816000875af19250505080156127e2575060408051601f3d908101601f191682019092526127df918101906143f0565b60015b612897576127ee61440d565b806308c379a0036128275750612802614429565b8061280d5750612829565b8060405162461bcd60e51b81526004016109209190613784565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610920565b6001600160e01b0319811663f23a6e6160e01b146115c25760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610920565b60008181526002830160205260408120548190806129375761292a858561309c565b925060009150611c2a9050565b600192509050611c2a565b6001600160a01b0384163b156117165760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061298690899089908890889088906004016144a6565b6020604051808303816000875af19250505080156129c1575060408051601f3d908101601f191682019092526129be918101906143f0565b60015b6129cd576127ee61440d565b6001600160e01b0319811663bc197c8160e01b146115c25760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610920565b60606000612a4b836130a8565b90508067ffffffffffffffff811115612a6657612a6661382d565b604051908082528060200260200182016040528015612a8f578160200160208202803683370190505b50915060005b81811015611f5057612aa784826130b3565b60001c838281518110612abc57612abc6141ac565b6020908102919091010152600101612a95565b6060608082901c6001600160801b03831680612aeb33846108a6565b1015612b3c576040517f1f9843510000000000000000000000000000000000000000000000000000000081523360048201526001600160801b03808416602483015282166044820152606401610920565b612b5933836001600160801b0316836001600160801b03166130bf565b505060408051602081019091526000815292915050565b6060838383604051602001612b8793929190614509565b60405160208183030381529060405290509392505050565b600080612bab8761201f565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310b83dc08789848989896040518763ffffffff1660e01b8152600401612c02959493929190614536565b60206040518083038185885af1158015612c20573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610f0691906141dd565b6060612c568263ffffffff16613286565b604051602001612c669190614589565b6040516020818303038152906040529050919050565b6000612c8b60208284866145ce565b610b91916145f8565b6000612c8b6040602084866145ce565b366000611c2583604081876145ce565b60006001600160a01b03821115612d325760405162461bcd60e51b8152602060048201526024808201527f5479706543617374733a2062797465733332546f41646472657373206f76657260448201527f666c6f77000000000000000000000000000000000000000000000000000000006064820152608401610920565b5090565b604080516020810190915260008152608084901c906001600160801b0385169061171690879084908490611ae0565b6000610b918383613326565b63ffffffff81166000908152610160602052604090205460609061094e90613343565b600054610100900460ff16612dff5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610920565b61172f81613361565b600054610100900460ff16612e735760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610920565b6113fa61336d565b6114518383836133e1565b600080612e928661201f565b6040517f81d2ea950000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906381d2ea9590612f0290899085908a908a908a90600401614536565b602060405180830381865afa1580156117ac573d6000803e3d6000fd5b6001600160a01b038516612f9d5760005b8351811015612f9b57828181518110612f4b57612f4b6141ac565b602002602001015160976000868481518110612f6957612f696141ac565b602002602001015181526020019081526020016000206000828254612f8e9190614275565b9091555050600101612f30565b505b6001600160a01b0384166117165760005b83518110156115c2576000848281518110612fcb57612fcb6141ac565b602002602001015190506000848381518110612fe957612fe96141ac565b60200260200101519050600060976000848152602001908152602001600020549050818110156130815760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c790000000000000000000000000000000000000000000000006064820152608401610920565b60009283526097602052604090922091039055600101612fae565b6000610b9183836133fe565b600061094e82613416565b6000610b918383613420565b6001600160a01b03831661313b5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610920565b33600061314784612609565b9050600061315484612609565b905061317483876000858560405180602001604052806000815250612654565b60008581526065602090815260408083206001600160a01b038a1684529091529020548481101561320c5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610920565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526115c2565b606060006132938361344a565b600101905060008167ffffffffffffffff8111156132b3576132b361382d565b6040519080825280601f01601f1916602001820160405280156132dd576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846132e757509392505050565b60008181526002830160205260408120819055610b91838361352c565b606061094e6000833360405180602001604052806000815250613538565b6067610d8582826142cf565b600054610100900460ff166133d85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610920565b6113fa336120f7565b60008281526002840160205260408120829055610bd8848461356d565b60008181526001830160205260408120541515610b91565b600061094e825490565b6000826000018281548110613437576134376141ac565b9060005260206000200154905092915050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613493577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106134bf576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106134dd57662386f26fc10000830492506010015b6305f5e10083106134f5576305f5e100830492506008015b612710831061350957612710830492506004015b6064831061351b576064830492506002015b600a831061094e5760010192915050565b6000610b918383613579565b6060600185858585604051602001613554959493929190614616565b6040516020818303038152906040529050949350505050565b6000610b91838361366c565b6000818152600183016020526040812054801561366257600061359d600183614688565b85549091506000906135b190600190614688565b90508181146136165760008660000182815481106135d1576135d16141ac565b90600052602060002001549050808760000184815481106135f4576135f46141ac565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806136275761362761469b565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061094e565b600091505061094e565b60008181526001830160205260408120546136b35750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561094e565b50600061094e565b80356001600160a01b03811681146136d257600080fd5b919050565b600080604083850312156136ea57600080fd5b6136f3836136bb565b946020939093013593505050565b6001600160e01b03198116811461172f57600080fd5b60006020828403121561372957600080fd5b8135610b9181613701565b60005b8381101561374f578181015183820152602001613737565b50506000910152565b60008151808452613770816020860160208601613734565b601f01601f19169290920160200192915050565b602081526000610b916020830184613758565b6000602082840312156137a957600080fd5b610b91826136bb565b6000602082840312156137c457600080fd5b5035919050565b6000806000606084860312156137e057600080fd5b6137e9846136bb565b95602085013595506040909401359392505050565b803563ffffffff811681146136d257600080fd5b60006020828403121561382457600080fd5b610b91826137fe565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156138695761386961382d565b6040525050565b600067ffffffffffffffff82111561388a5761388a61382d565b5060051b60200190565b600082601f8301126138a557600080fd5b81356138b081613870565b6040516138bd8282613843565b80915082815260208101915060208360051b8601019250858311156138e157600080fd5b602085015b838110156138fe5780358352602092830192016138e6565b5095945050505050565b600082601f83011261391957600080fd5b81356020830160008067ffffffffffffffff84111561393a5761393a61382d565b50604051601f8401601f1916602001906139548282613843565b80925084815287858501111561396957600080fd5b84846020830137600060208683010152809550505050505092915050565b600080600080600060a0868803121561399f57600080fd5b6139a8866136bb565b94506139b6602087016136bb565b9350604086013567ffffffffffffffff8111156139d257600080fd5b6139de88828901613894565b935050606086013567ffffffffffffffff8111156139fb57600080fd5b613a0788828901613894565b925050608086013567ffffffffffffffff811115613a2457600080fd5b613a3088828901613908565b9150509295509295909350565b602080825282518282018190526000918401906040840190835b81811015613a7b57835163ffffffff16835260209384019390920191600101613a57565b509095945050505050565b60008060408385031215613a9957600080fd5b6136f3836137fe565b60008060408385031215613ab557600080fd5b823567ffffffffffffffff811115613acc57600080fd5b8301601f81018513613add57600080fd5b8035613ae881613870565b604051613af58282613843565b80915082815260208101915060208360051b850101925087831115613b1957600080fd5b6020840193505b82841015613b4257613b31846136bb565b825260209384019390910190613b20565b9450505050602083013567ffffffffffffffff811115613b6157600080fd5b613b6d85828601613894565b9150509250929050565b600081518084526020840193506020830160005b82811015613ba9578151865260209586019590910190600101613b8b565b5093949350505050565b602081526000610b916020830184613b77565b60008083601f840112613bd857600080fd5b50813567ffffffffffffffff811115613bf057600080fd5b602083019150836020828501011115611c2a57600080fd5b60008060008060008060a08789031215613c2157600080fd5b613c2a876137fe565b95506020870135945060408701359350606087013567ffffffffffffffff811115613c5457600080fd5b613c6089828a01613bc6565b9094509250613c739050608088016136bb565b90509295509295509295565b60008060008060608587031215613c9557600080fd5b613c9e856137fe565b935060208501359250604085013567ffffffffffffffff811115613cc157600080fd5b613ccd87828801613bc6565b95989497509550505050565b60008083601f840112613ceb57600080fd5b50813567ffffffffffffffff811115613d0357600080fd5b6020830191508360208260051b8501011115611c2a57600080fd5b60008060008060008060808789031215613d3757600080fd5b613d40876137fe565b955060208701359450604087013567ffffffffffffffff811115613d6357600080fd5b613d6f89828a01613cd9565b909550935050606087013567ffffffffffffffff811115613d8f57600080fd5b613d9b89828a01613cd9565b979a9699509497509295939492505050565b600081518084526020840193506020830160005b82811015613ba95781516001600160801b0316865260209586019590910190600101613dc1565b604081526000613dfb6040830185613dad565b82810360208401526121b58185613dad565b60008060208385031215613e2057600080fd5b823567ffffffffffffffff811115613e3757600080fd5b613e4385828601613cd9565b90969095509350505050565b600080600060608486031215613e6457600080fd5b6137e9846137fe565b60008060008060008060c08789031215613e8657600080fd5b863567ffffffffffffffff811115613e9d57600080fd5b613ea989828a01613908565b965050602087013567ffffffffffffffff811115613ec657600080fd5b613ed289828a01613908565b955050604087013567ffffffffffffffff811115613eef57600080fd5b613efb89828a01613908565b945050613f0a606088016136bb565b9250613f18608088016136bb565b9150613c7360a088016136bb565b60008060408385031215613f3957600080fd5b613f42836136bb565b915060208301358015158114613f5757600080fd5b809150509250929050565b60008060208385031215613f7557600080fd5b823567ffffffffffffffff811115613f8c57600080fd5b8301601f81018513613f9d57600080fd5b803567ffffffffffffffff811115613fb457600080fd5b8560208260061b8401011115613fc957600080fd5b6020919091019590945092505050565b60008060008060408587031215613fef57600080fd5b843567ffffffffffffffff81111561400657600080fd5b61401287828801613cd9565b909550935050602085013567ffffffffffffffff81111561403257600080fd5b613ccd87828801613cd9565b6000806040838503121561405157600080fd5b61405a836136bb565b9150614068602084016136bb565b90509250929050565b80356001600160801b03811681146136d257600080fd5b6000806000806080858703121561409e57600080fd5b6140a7856137fe565b9350602085013592506140bc60408601614071565b91506140ca60608601614071565b905092959194509250565b600080600080600060a086880312156140ed57600080fd5b6140f6866136bb565b9450614104602087016136bb565b93506040860135925060608601359150608086013567ffffffffffffffff811115613a2457600080fd5b6000806040838503121561414157600080fd5b61414a83614071565b9150602083013567ffffffffffffffff81111561416657600080fd5b613b6d85828601613908565b600181811c9082168061418657607f821691505b6020821081036141a657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156141d457600080fd5b610b9182614071565b6000602082840312156141ef57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6001600160801b03828116828216039081111561094e5761094e6141f6565b6001600160801b03818116838216019081111561094e5761094e6141f6565b60006001600160801b0382166001600160801b03810361426c5761426c6141f6565b60010192915050565b8082018082111561094e5761094e6141f6565b601f821115610bbb57806000526020600020601f840160051c810160208510156142af5750805b601f840160051c820191505b81811015610c7b57600081556001016142bb565b815167ffffffffffffffff8111156142e9576142e961382d565b6142fd816142f78454614172565b84614288565b6020601f82116001811461433157600083156143195750848201515b600019600385901b1c1916600184901b178455610c7b565b600084815260208120601f198516915b828110156143615787850151825560209485019460019092019101614341565b508482101561437f5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6040815260006143a16040830185613b77565b82810360208401526121b58185613b77565b6001600160a01b03861681526001600160a01b038516602082015283604082015282606082015260a060808201526000610f0660a0830184613758565b60006020828403121561440257600080fd5b8151610b9181613701565b600060033d11156144265760046000803e5060005160e01c5b90565b600060443d10156144375790565b6040513d600319016004823e80513d602482011167ffffffffffffffff8211171561446157505090565b808201805167ffffffffffffffff81111561447d575050505090565b3d8401600319018282016020011115614497575050505090565b610eb760208285010185613843565b6001600160a01b03861681526001600160a01b038516602082015260a0604082015260006144d760a0830186613b77565b82810360608401526144e98186613b77565b905082810360808401526144fd8185613758565b98975050505050505050565b83815282602082015260008251614527816040850160208701613734565b91909101604001949350505050565b63ffffffff8616815284602082015260a06040820152600061455b60a0830186613758565b828103606084015261456d8186613758565b9150506001600160a01b03831660808301529695505050505050565b7f4e6f20726f7574657220656e726f6c6c656420666f7220646f6d61696e3a20008152600082516145c181601f850160208701613734565b91909101601f0192915050565b600080858511156145de57600080fd5b838611156145eb57600080fd5b5050820193919092039150565b8035602083101561094e57600019602084900360031b1b1692915050565b7fffff0000000000000000000000000000000000000000000000000000000000008660f01b1681528460028201528360228201526bffffffffffffffffffffffff198360601b16604282015260008251614677816056850160208701613734565b919091016056019695505050505050565b8181038181111561094e5761094e6141f6565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220770dc3b09448a07033cc12ad0a8e785444bdf333411c3be95e0b95b01197da2b64736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106102c55760003560e01c80637f5a7c7b11610179578063bd85b039116100d6578063efae508a1161008a578063f2ed8c5311610064578063f2ed8c5314610846578063f2fde38b14610866578063f857e60b1461088657600080fd5b8063efae508a146107f3578063f158133f14610813578063f242432a1461082657600080fd5b8063de523cf3116100bb578063de523cf31461076a578063e9198bf91461078a578063e985e9c5146107aa57600080fd5b8063bd85b03914610709578063d5438eae1461073657600080fd5b806395d89b411161012d578063a22cb46511610112578063a22cb465146106a9578063b1bd6436146106c9578063b49c53a7146106e957600080fd5b806395d89b41146106745780639630c8ac1461068957600080fd5b80638d3638f41161015e5780638d3638f4146105c45780638da5cb5b1461060d57806393c448471461062b57600080fd5b80637f5a7c7b1461057957806381b4e8b4146105b157600080fd5b806349d462ef11610227578063657e1fe2116101db578063715018a6116101c0578063715018a61461051657806371a15b381461052b578063775313a11461054b57600080fd5b8063657e1fe2146104d557806370a08231146104f657600080fd5b80634f558e791161020c5780634f558e791461048057806351debffc146104af57806356d5d475146104c257600080fd5b806349d462ef146104335780634e1273f41461045357600080fd5b8063156e29f61161027e5780632eb2c2d6116102635780632eb2c2d6146103d15780633dfd3873146103f1578063440df4f41461041157600080fd5b8063156e29f6146103915780632ead72f6146103b157600080fd5b806306fdde03116102af57806306fdde031461032d5780630e72cc061461034f5780630e89341c1461037157600080fd5b8062fdd58e146102ca57806301ffc9a7146102fd575b600080fd5b3480156102d657600080fd5b506102ea6102e53660046136d7565b6108a6565b6040519081526020015b60405180910390f35b34801561030957600080fd5b5061031d610318366004613717565b610954565b60405190151581526020016102f4565b34801561033957600080fd5b5061034261095f565b6040516102f49190613784565b34801561035b57600080fd5b5061036f61036a366004613797565b6109f2565b005b34801561037d57600080fd5b5061034261038c3660046137b2565b610ad9565b34801561039d57600080fd5b5061036f6103ac3660046137cb565b610b98565b3480156103bd57600080fd5b506102ea6103cc366004613812565b610bc0565b3480156103dd57600080fd5b5061036f6103ec366004613987565b610be0565b3480156103fd57600080fd5b5061036f61040c366004613797565b610c82565b34801561041d57600080fd5b50610426610d61565b6040516102f49190613a3d565b34801561043f57600080fd5b5061036f61044e366004613a86565b610d73565b34801561045f57600080fd5b5061047361046e366004613aa2565b610d89565b6040516102f49190613bb3565b34801561048c57600080fd5b5061031d61049b3660046137b2565b600090815260976020526040902054151590565b6102ea6104bd366004613c08565b610ebf565b61036f6104d0366004613c7f565b610f11565b6104e86104e3366004613d1e565b61103d565b6040516102f4929190613de8565b34801561050257600080fd5b506102ea610511366004613797565b6113b4565b34801561052257600080fd5b5061036f6113e8565b34801561053757600080fd5b5061036f610546366004613e0d565b6113fc565b34801561055757600080fd5b506102ea610566366004613812565b6101606020526000908152604090205481565b34801561058557600080fd5b5060fb54610599906001600160a01b031681565b6040516001600160a01b0390911681526020016102f4565b6102ea6105bf366004613e4f565b611457565b3480156105d057600080fd5b506105f87f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016102f4565b34801561061957600080fd5b5060c9546001600160a01b0316610599565b34801561063757600080fd5b506103426040518060400160405280600581526020017f352e382e3300000000000000000000000000000000000000000000000000000081525081565b34801561068057600080fd5b50610342611465565b34801561069557600080fd5b5061036f6106a4366004613e6d565b611475565b3480156106b557600080fd5b5061036f6106c4366004613f26565b6115cb565b3480156106d557600080fd5b5061036f6106e4366004613f62565b6115d6565b3480156106f557600080fd5b5061036f610704366004613a86565b611647565b34801561071557600080fd5b506102ea6107243660046137b2565b60009081526097602052604090205490565b34801561074257600080fd5b506105997f000000000000000000000000000000000000000000000000000000000000000081565b34801561077657600080fd5b5060fc54610599906001600160a01b031681565b34801561079657600080fd5b5061036f6107a5366004613fd9565b611659565b3480156107b657600080fd5b5061031d6107c536600461403e565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b3480156107ff57600080fd5b5061036f61080e366004613812565b61171e565b6102ea610821366004614088565b611732565b34801561083257600080fd5b5061036f6108413660046140d5565b6117da565b34801561085257600080fd5b506102ea610861366004613812565b611875565b34801561087257600080fd5b5061036f610881366004613797565b61189f565b34801561089257600080fd5b5061036f6108a136600461412e565b61192c565b60006001600160a01b0383166109295760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b600061094e82611957565b6060610161805461096f90614172565b80601f016020809104026020016040519081016040528092919081815260200182805461099b90614172565b80156109e85780601f106109bd576101008083540402835291602001916109e8565b820191906000526020600020905b8154815290600101906020018083116109cb57829003601f168201915b5050505050905090565b806001600160a01b0381163b151580610a1257506001600160a01b038116155b610a6e5760405162461bcd60e51b815260206004820152602760248201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060448201526673657474696e6760c81b6064820152608401610920565b610a766119f2565b60fc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527fc47cbcc588c67679e52261c45cc315e56562f8d0ccaba16facb9093ff9498799906020015b60405180910390a15050565b60008181526101636020526040812080546060929190610af890614172565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2490614172565b8015610b715780601f10610b4657610100808354040283529160200191610b71565b820191906000526020600020905b815481529060010190602001808311610b5457829003601f168201915b50505050509050600081511115610b885792915050565b610b9183611a4c565b9392505050565b610ba06119f2565b610bbb83838360405180602001604052806000815250611ae0565b505050565b600080610bd861012d63ffffffff80861690611c1816565b949350505050565b6001600160a01b038516331480610bfc5750610bfc85336107c5565b610c6e5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610920565b610c7b8585858585611c31565b5050505050565b806001600160a01b0381163b151580610ca257506001600160a01b038116155b610cfe5760405162461bcd60e51b815260206004820152602760248201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060448201526673657474696e6760c81b6064820152608401610920565b610d066119f2565b60fb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527f4eab7b127c764308788622363ad3e9532de3dfba7845bd4f84c125a22544255a90602001610acd565b6060610d6e61012d611ea6565b905090565b610d7b6119f2565b610d858282611f57565b5050565b60608151835114610e025760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610920565b6000835167ffffffffffffffff811115610e1e57610e1e61382d565b604051908082528060200260200182016040528015610e47578160200160208202803683370190505b50905060005b8451811015610eb757610e92858281518110610e6b57610e6b6141ac565b6020026020010151858381518110610e8557610e856141ac565b60200260200101516108a6565b828281518110610ea457610ea46141ac565b6020908102919091010152600101610e4d565b509392505050565b6000610f068787873488888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250611fa6915050565b979650505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610faf5760405162461bcd60e51b815260206004820152602160248201527f4d61696c626f78436c69656e743a2073656e646572206e6f74206d61696c626f60448201527f78000000000000000000000000000000000000000000000000000000000000006064820152608401610920565b6000610fba8561201f565b90508381146110315760405162461bcd60e51b815260206004820152602560248201527f456e726f6c6c656420726f7574657220646f6573206e6f74206d61746368207360448201527f656e6465720000000000000000000000000000000000000000000000000000006064820152608401610920565b610c7b8585858561206b565b60608084158061104b575082155b15611082576040517fa600c81d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8483146110ce576040517f19608e390000000000000000000000000000000000000000000000000000000081526001600160801b03808716600483015284166024820152604401610920565b60005b6001600160801b03811686111561138e57306381b4e8b48a8a61115b8b8b6001600160801b038816818110611108576111086141ac565b905060200201602081019061111d91906141c2565b8a8a886001600160801b0316818110611138576111386141ac565b905060200201602081019061114d91906141c2565b6001600160801b0316919050565b6040516001600160e01b031960e086901b16815263ffffffff939093166004840152602483019190915260448201526064016020604051808303816000875af19250505080156111c8575060408051601f3d908101601f191682019092526111c5918101906141dd565b60015b61137b5760006111d8828861420c565b9050806001600160801b031667ffffffffffffffff8111156111fc576111fc61382d565b604051908082528060200260200182016040528015611225578160200160208202803683370190505b509350806001600160801b031667ffffffffffffffff81111561124a5761124a61382d565b604051908082528060200260200182016040528015611273578160200160208202803683370190505b50925060005b816001600160801b0316816001600160801b0316101561137357888861129f838661422b565b6001600160801b03168181106112b7576112b76141ac565b90506020020160208101906112cc91906141c2565b85826001600160801b0316815181106112e7576112e76141ac565b6001600160801b0390921660209283029190910190910152868661130b838661422b565b6001600160801b0316818110611323576113236141ac565b905060200201602081019061133891906141c2565b84826001600160801b031681518110611353576113536141ac565b6001600160801b0390921660209283029190910190910152600101611279565b5050506113a9565b50806113868161424a565b9150506110d1565b50506040805160008082526020820190815281830190925291505b965096945050505050565b60006040517facab90bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113f06119f2565b6113fa60006120f7565b565b6114046119f2565b8060005b818110156114515761143f848483818110611425576114256141ac565b905060200201602081019061143a9190613812565b612156565b61144a600182614275565b9050611408565b50505050565b6000610bd884848434612192565b6060610162805461096f90614172565b600054610100900460ff16158080156114955750600054600160ff909116105b806114af5750303b1580156114af575060005460ff166001145b6115215760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610920565b6000805460ff191660011790558015611544576000805461ff0019166101001790555b61154d876121be565b611555612232565b61156084848461229d565b61016161156d87826142cf565b5061016261157b86826142cf565b5080156115c2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b610d8533838361232b565b6115de6119f2565b60005b81811015610bbb576116358383838181106115fe576115fe6141ac565b6116149260206040909202019081019150613812565b848484818110611626576116266141ac565b90506040020160200135611f57565b611640600182614275565b90506115e1565b61164f6119f2565b610d85828261241f565b6116616119f2565b8281146116b05760405162461bcd60e51b815260206004820152600760248201527f216c656e677468000000000000000000000000000000000000000000000000006044820152606401610920565b8260005b81811015611716576117048686838181106116d1576116d16141ac565b90506020020160208101906116e69190613812565b8585848181106116f8576116f86141ac565b9050602002013561241f565b61170f600182614275565b90506116b4565b505050505050565b6117266119f2565b61172f81612156565b50565b6000806001600160801b0383166040517f81b4e8b400000000000000000000000000000000000000000000000000000000815263ffffffff88166004820152602481018790526044810182905290915030906381b4e8b4906064016020604051808303816000875af11580156117ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d091906141dd565b9695505050505050565b6001600160a01b0385163314806117f657506117f685336107c5565b6118685760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610920565b610c7b8585858585612436565b6040805160208101909152600080825260fb54909161094e918491906001600160a01b03166125f3565b6118a76119f2565b6001600160a01b0381166119235760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610920565b61172f816120f7565b6119346119f2565b6001600160801b038216600090815261016360205260409020610bbb82826142cf565b60006001600160e01b031982167fd9b67a260000000000000000000000000000000000000000000000000000000014806119ba57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061094e57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461094e565b60c9546001600160a01b031633146113fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610920565b606060678054611a5b90614172565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8790614172565b8015611ad45780601f10611aa957610100808354040283529160200191611ad4565b820191906000526020600020905b815481529060010190602001808311611ab757829003601f168201915b50505050509050919050565b6001600160a01b038416611b5c5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610920565b336000611b6885612609565b90506000611b7585612609565b9050611b8683600089858589612654565b60008681526065602090815260408083206001600160a01b038b16845290915281208054879290611bb8908490614275565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46115c283600089898989612763565b600080611c258484612908565b915091505b9250929050565b8151835114611ca85760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610920565b6001600160a01b038416611d0c5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610920565b33611d1b818787878787612654565b60005b8451811015611e40576000858281518110611d3b57611d3b6141ac565b602002602001015190506000858381518110611d5957611d596141ac565b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015611ded5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610920565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611e2c908490614275565b909155505060019093019250611d1e915050565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611e9092919061438e565b60405180910390a4611716818787878787612942565b60606000611eb383612a3e565b9050805167ffffffffffffffff811115611ecf57611ecf61382d565b604051908082528060200260200182016040528015611ef8578160200160208202803683370190505b50915060005b8151811015611f5057818181518110611f1957611f196141ac565b6020026020010151838281518110611f3357611f336141ac565b63ffffffff90921660209283029190910190910152600101611efe565b5050919050565b63ffffffff821660008181526101606020908152604091829020849055815192835282018390527fc3de732a98b24a2b5c6f67e8a7fb057ffc14046b83968a2c73e4148d2fba978b9101610acd565b600080611fb286612acf565b90506000611fc1888884612b70565b9050611fd08987838888612b9f565b9250878963ffffffff167fd229aacb94204188fe8042965fa6b269c62dc5818b21238779ab64bdd17efeec8960405161200b91815260200190565b60405180910390a350509695505050505050565b6000808061203861012d63ffffffff80871690611c1816565b915091508115612049579392505050565b61205284612c45565b60405162461bcd60e51b81526004016109209190613784565b60006120778383612c7c565b905060006120858484612c94565b90503660006120948686612ca4565b915091506120ac6120a485612cb4565b848484612d36565b838863ffffffff167fba20947a325f450d232530e5f5fce293e7963499d5309a07cee84a269f2f15a6856040516120e591815260200190565b60405180910390a35050505050505050565b60c980546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61216b61012d63ffffffff80841690612d6516565b61217482612c45565b90610d855760405162461bcd60e51b81526004016109209190613784565b60006121b5858585856121a48a612d71565b60fb546001600160a01b0316611fa6565b95945050505050565b600054610100900460ff166122295760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610920565b61172f81612d94565b600054610100900460ff166113fa5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610920565b600054610100900460ff166123085760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610920565b612310612e08565b61231983610c82565b612322826109f2565b610bbb816120f7565b816001600160a01b0316836001600160a01b0316036123b25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610920565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610d8561012d63ffffffff808516908490612e7b16565b6001600160a01b03841661249a5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610920565b3360006124a685612609565b905060006124b385612609565b90506124c3838989858589612654565b60008681526065602090815260408083206001600160a01b038c168452909152902054858110156125495760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610920565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612588908490614275565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46125e8848a8a8a8a8a612763565b505050505050505050565b6000610bd8848461260387612d71565b85612e86565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612643576126436141ac565b602090810291909101015292915050565b60005b8351816001600160801b03161015612754576001600160801b03801684826001600160801b03168151811061268e5761268e6141ac565b602002602001015111156126f45783816001600160801b0316815181106126b7576126b76141ac565b60200260200101516040517fcbaba7a300000000000000000000000000000000000000000000000000000000815260040161092091815260200190565b6001600160801b03801683826001600160801b031681518110612719576127196141ac565b602002602001015111156127425782816001600160801b0316815181106126b7576126b76141ac565b8061274c8161424a565b915050612657565b50611716868686868686612f1f565b6001600160a01b0384163b156117165760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906127a790899089908890889088906004016143b3565b6020604051808303816000875af19250505080156127e2575060408051601f3d908101601f191682019092526127df918101906143f0565b60015b612897576127ee61440d565b806308c379a0036128275750612802614429565b8061280d5750612829565b8060405162461bcd60e51b81526004016109209190613784565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610920565b6001600160e01b0319811663f23a6e6160e01b146115c25760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610920565b60008181526002830160205260408120548190806129375761292a858561309c565b925060009150611c2a9050565b600192509050611c2a565b6001600160a01b0384163b156117165760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061298690899089908890889088906004016144a6565b6020604051808303816000875af19250505080156129c1575060408051601f3d908101601f191682019092526129be918101906143f0565b60015b6129cd576127ee61440d565b6001600160e01b0319811663bc197c8160e01b146115c25760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610920565b60606000612a4b836130a8565b90508067ffffffffffffffff811115612a6657612a6661382d565b604051908082528060200260200182016040528015612a8f578160200160208202803683370190505b50915060005b81811015611f5057612aa784826130b3565b60001c838281518110612abc57612abc6141ac565b6020908102919091010152600101612a95565b6060608082901c6001600160801b03831680612aeb33846108a6565b1015612b3c576040517f1f9843510000000000000000000000000000000000000000000000000000000081523360048201526001600160801b03808416602483015282166044820152606401610920565b612b5933836001600160801b0316836001600160801b03166130bf565b505060408051602081019091526000815292915050565b6060838383604051602001612b8793929190614509565b60405160208183030381529060405290509392505050565b600080612bab8761201f565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310b83dc08789848989896040518763ffffffff1660e01b8152600401612c02959493929190614536565b60206040518083038185885af1158015612c20573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610f0691906141dd565b6060612c568263ffffffff16613286565b604051602001612c669190614589565b6040516020818303038152906040529050919050565b6000612c8b60208284866145ce565b610b91916145f8565b6000612c8b6040602084866145ce565b366000611c2583604081876145ce565b60006001600160a01b03821115612d325760405162461bcd60e51b8152602060048201526024808201527f5479706543617374733a2062797465733332546f41646472657373206f76657260448201527f666c6f77000000000000000000000000000000000000000000000000000000006064820152608401610920565b5090565b604080516020810190915260008152608084901c906001600160801b0385169061171690879084908490611ae0565b6000610b918383613326565b63ffffffff81166000908152610160602052604090205460609061094e90613343565b600054610100900460ff16612dff5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610920565b61172f81613361565b600054610100900460ff16612e735760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610920565b6113fa61336d565b6114518383836133e1565b600080612e928661201f565b6040517f81d2ea950000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906381d2ea9590612f0290899085908a908a908a90600401614536565b602060405180830381865afa1580156117ac573d6000803e3d6000fd5b6001600160a01b038516612f9d5760005b8351811015612f9b57828181518110612f4b57612f4b6141ac565b602002602001015160976000868481518110612f6957612f696141ac565b602002602001015181526020019081526020016000206000828254612f8e9190614275565b9091555050600101612f30565b505b6001600160a01b0384166117165760005b83518110156115c2576000848281518110612fcb57612fcb6141ac565b602002602001015190506000848381518110612fe957612fe96141ac565b60200260200101519050600060976000848152602001908152602001600020549050818110156130815760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c790000000000000000000000000000000000000000000000006064820152608401610920565b60009283526097602052604090922091039055600101612fae565b6000610b9183836133fe565b600061094e82613416565b6000610b918383613420565b6001600160a01b03831661313b5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610920565b33600061314784612609565b9050600061315484612609565b905061317483876000858560405180602001604052806000815250612654565b60008581526065602090815260408083206001600160a01b038a1684529091529020548481101561320c5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610920565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526115c2565b606060006132938361344a565b600101905060008167ffffffffffffffff8111156132b3576132b361382d565b6040519080825280601f01601f1916602001820160405280156132dd576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846132e757509392505050565b60008181526002830160205260408120819055610b91838361352c565b606061094e6000833360405180602001604052806000815250613538565b6067610d8582826142cf565b600054610100900460ff166133d85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610920565b6113fa336120f7565b60008281526002840160205260408120829055610bd8848461356d565b60008181526001830160205260408120541515610b91565b600061094e825490565b6000826000018281548110613437576134376141ac565b9060005260206000200154905092915050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613493577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106134bf576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106134dd57662386f26fc10000830492506010015b6305f5e10083106134f5576305f5e100830492506008015b612710831061350957612710830492506004015b6064831061351b576064830492506002015b600a831061094e5760010192915050565b6000610b918383613579565b6060600185858585604051602001613554959493929190614616565b6040516020818303038152906040529050949350505050565b6000610b91838361366c565b6000818152600183016020526040812054801561366257600061359d600183614688565b85549091506000906135b190600190614688565b90508181146136165760008660000182815481106135d1576135d16141ac565b90600052602060002001549050808760000184815481106135f4576135f46141ac565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806136275761362761469b565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061094e565b600091505061094e565b60008181526001830160205260408120546136b35750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561094e565b50600061094e565b80356001600160a01b03811681146136d257600080fd5b919050565b600080604083850312156136ea57600080fd5b6136f3836136bb565b946020939093013593505050565b6001600160e01b03198116811461172f57600080fd5b60006020828403121561372957600080fd5b8135610b9181613701565b60005b8381101561374f578181015183820152602001613737565b50506000910152565b60008151808452613770816020860160208601613734565b601f01601f19169290920160200192915050565b602081526000610b916020830184613758565b6000602082840312156137a957600080fd5b610b91826136bb565b6000602082840312156137c457600080fd5b5035919050565b6000806000606084860312156137e057600080fd5b6137e9846136bb565b95602085013595506040909401359392505050565b803563ffffffff811681146136d257600080fd5b60006020828403121561382457600080fd5b610b91826137fe565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156138695761386961382d565b6040525050565b600067ffffffffffffffff82111561388a5761388a61382d565b5060051b60200190565b600082601f8301126138a557600080fd5b81356138b081613870565b6040516138bd8282613843565b80915082815260208101915060208360051b8601019250858311156138e157600080fd5b602085015b838110156138fe5780358352602092830192016138e6565b5095945050505050565b600082601f83011261391957600080fd5b81356020830160008067ffffffffffffffff84111561393a5761393a61382d565b50604051601f8401601f1916602001906139548282613843565b80925084815287858501111561396957600080fd5b84846020830137600060208683010152809550505050505092915050565b600080600080600060a0868803121561399f57600080fd5b6139a8866136bb565b94506139b6602087016136bb565b9350604086013567ffffffffffffffff8111156139d257600080fd5b6139de88828901613894565b935050606086013567ffffffffffffffff8111156139fb57600080fd5b613a0788828901613894565b925050608086013567ffffffffffffffff811115613a2457600080fd5b613a3088828901613908565b9150509295509295909350565b602080825282518282018190526000918401906040840190835b81811015613a7b57835163ffffffff16835260209384019390920191600101613a57565b509095945050505050565b60008060408385031215613a9957600080fd5b6136f3836137fe565b60008060408385031215613ab557600080fd5b823567ffffffffffffffff811115613acc57600080fd5b8301601f81018513613add57600080fd5b8035613ae881613870565b604051613af58282613843565b80915082815260208101915060208360051b850101925087831115613b1957600080fd5b6020840193505b82841015613b4257613b31846136bb565b825260209384019390910190613b20565b9450505050602083013567ffffffffffffffff811115613b6157600080fd5b613b6d85828601613894565b9150509250929050565b600081518084526020840193506020830160005b82811015613ba9578151865260209586019590910190600101613b8b565b5093949350505050565b602081526000610b916020830184613b77565b60008083601f840112613bd857600080fd5b50813567ffffffffffffffff811115613bf057600080fd5b602083019150836020828501011115611c2a57600080fd5b60008060008060008060a08789031215613c2157600080fd5b613c2a876137fe565b95506020870135945060408701359350606087013567ffffffffffffffff811115613c5457600080fd5b613c6089828a01613bc6565b9094509250613c739050608088016136bb565b90509295509295509295565b60008060008060608587031215613c9557600080fd5b613c9e856137fe565b935060208501359250604085013567ffffffffffffffff811115613cc157600080fd5b613ccd87828801613bc6565b95989497509550505050565b60008083601f840112613ceb57600080fd5b50813567ffffffffffffffff811115613d0357600080fd5b6020830191508360208260051b8501011115611c2a57600080fd5b60008060008060008060808789031215613d3757600080fd5b613d40876137fe565b955060208701359450604087013567ffffffffffffffff811115613d6357600080fd5b613d6f89828a01613cd9565b909550935050606087013567ffffffffffffffff811115613d8f57600080fd5b613d9b89828a01613cd9565b979a9699509497509295939492505050565b600081518084526020840193506020830160005b82811015613ba95781516001600160801b0316865260209586019590910190600101613dc1565b604081526000613dfb6040830185613dad565b82810360208401526121b58185613dad565b60008060208385031215613e2057600080fd5b823567ffffffffffffffff811115613e3757600080fd5b613e4385828601613cd9565b90969095509350505050565b600080600060608486031215613e6457600080fd5b6137e9846137fe565b60008060008060008060c08789031215613e8657600080fd5b863567ffffffffffffffff811115613e9d57600080fd5b613ea989828a01613908565b965050602087013567ffffffffffffffff811115613ec657600080fd5b613ed289828a01613908565b955050604087013567ffffffffffffffff811115613eef57600080fd5b613efb89828a01613908565b945050613f0a606088016136bb565b9250613f18608088016136bb565b9150613c7360a088016136bb565b60008060408385031215613f3957600080fd5b613f42836136bb565b915060208301358015158114613f5757600080fd5b809150509250929050565b60008060208385031215613f7557600080fd5b823567ffffffffffffffff811115613f8c57600080fd5b8301601f81018513613f9d57600080fd5b803567ffffffffffffffff811115613fb457600080fd5b8560208260061b8401011115613fc957600080fd5b6020919091019590945092505050565b60008060008060408587031215613fef57600080fd5b843567ffffffffffffffff81111561400657600080fd5b61401287828801613cd9565b909550935050602085013567ffffffffffffffff81111561403257600080fd5b613ccd87828801613cd9565b6000806040838503121561405157600080fd5b61405a836136bb565b9150614068602084016136bb565b90509250929050565b80356001600160801b03811681146136d257600080fd5b6000806000806080858703121561409e57600080fd5b6140a7856137fe565b9350602085013592506140bc60408601614071565b91506140ca60608601614071565b905092959194509250565b600080600080600060a086880312156140ed57600080fd5b6140f6866136bb565b9450614104602087016136bb565b93506040860135925060608601359150608086013567ffffffffffffffff811115613a2457600080fd5b6000806040838503121561414157600080fd5b61414a83614071565b9150602083013567ffffffffffffffff81111561416657600080fd5b613b6d85828601613908565b600181811c9082168061418657607f821691505b6020821081036141a657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156141d457600080fd5b610b9182614071565b6000602082840312156141ef57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6001600160801b03828116828216039081111561094e5761094e6141f6565b6001600160801b03818116838216019081111561094e5761094e6141f6565b60006001600160801b0382166001600160801b03810361426c5761426c6141f6565b60010192915050565b8082018082111561094e5761094e6141f6565b601f821115610bbb57806000526020600020601f840160051c810160208510156142af5750805b601f840160051c820191505b81811015610c7b57600081556001016142bb565b815167ffffffffffffffff8111156142e9576142e961382d565b6142fd816142f78454614172565b84614288565b6020601f82116001811461433157600083156143195750848201515b600019600385901b1c1916600184901b178455610c7b565b600084815260208120601f198516915b828110156143615787850151825560209485019460019092019101614341565b508482101561437f5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6040815260006143a16040830185613b77565b82810360208401526121b58185613b77565b6001600160a01b03861681526001600160a01b038516602082015283604082015282606082015260a060808201526000610f0660a0830184613758565b60006020828403121561440257600080fd5b8151610b9181613701565b600060033d11156144265760046000803e5060005160e01c5b90565b600060443d10156144375790565b6040513d600319016004823e80513d602482011167ffffffffffffffff8211171561446157505090565b808201805167ffffffffffffffff81111561447d575050505090565b3d8401600319018282016020011115614497575050505090565b610eb760208285010185613843565b6001600160a01b03861681526001600160a01b038516602082015260a0604082015260006144d760a0830186613b77565b82810360608401526144e98186613b77565b905082810360808401526144fd8185613758565b98975050505050505050565b83815282602082015260008251614527816040850160208701613734565b91909101604001949350505050565b63ffffffff8616815284602082015260a06040820152600061455b60a0830186613758565b828103606084015261456d8186613758565b9150506001600160a01b03831660808301529695505050505050565b7f4e6f20726f7574657220656e726f6c6c656420666f7220646f6d61696e3a20008152600082516145c181601f850160208701613734565b91909101601f0192915050565b600080858511156145de57600080fd5b838611156145eb57600080fd5b5050820193919092039150565b8035602083101561094e57600019602084900360031b1b1692915050565b7fffff0000000000000000000000000000000000000000000000000000000000008660f01b1681528460028201528360228201526bffffffffffffffffffffffff198360601b16604282015260008251614677816056850160208701613734565b919091016056019695505050505050565b8181038181111561094e5761094e6141f6565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220770dc3b09448a07033cc12ad0a8e785444bdf333411c3be95e0b95b01197da2b64736f6c634300081c0033",
  "devdoc": {
    "details": "Compatible with existing Hyperlane protocol deployments by packing tokenId and amount into a single uint256. Uses standard TokenRouter interface without modifications. Limitation: Both tokenId and amount must be <= type(uint128).max",
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "ReceivedTransferRemote(uint32,bytes32,uint256)": {
        "details": "Emitted on `_handle` when a transfer message is processed.",
        "params": {
          "amount": "The amount of tokens minted on the destination chain.",
          "origin": "The identifier of the origin chain.",
          "recipient": "The address of the recipient on the destination chain."
        }
      },
      "SentTransferRemote(uint32,bytes32,uint256)": {
        "details": "Emitted on `transferRemote` when a transfer message is dispatched.",
        "params": {
          "amount": "The amount of tokens burnt on the origin chain.",
          "destination": "The identifier of the destination chain.",
          "recipient": "The address of the recipient on the destination chain."
        }
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "enrollRemoteRouter(uint32,bytes32)": {
        "params": {
          "_domain": "The domain of the remote Application Router",
          "_router": "The address of the remote Application Router"
        }
      },
      "enrollRemoteRouters(uint32[],bytes32[])": {
        "params": {
          "_addresses": "The addresses of the remote Application Routers",
          "_domains": "The domains of the remote Application Routers"
        }
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "handle(uint32,bytes32,bytes)": {
        "params": {
          "_message": "The message",
          "_origin": "The origin domain",
          "_sender": "The sender address"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quoteGasPayment(uint32)": {
        "params": {
          "_destinationDomain": "The domain of the router."
        },
        "returns": {
          "_0": "_gasPayment Payment computed by the registered InterchainGasPaymaster."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "routers(uint32)": {
        "details": "Returns 0 address if no router is enrolled for the given domain",
        "params": {
          "_domain": "The remote domain ID."
        },
        "returns": {
          "_0": "router The address of the Router contract for the given domain"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setDestinationGas((uint32,uint256)[])": {
        "params": {
          "gasConfigs": "The array of GasRouterConfig structs"
        }
      },
      "setDestinationGas(uint32,uint256)": {
        "params": {
          "domain": "The destination domain ID",
          "gas": "The gas limit"
        }
      },
      "setHook(address)": {
        "params": {
          "_hook": "The address of the hook contract."
        }
      },
      "setInterchainSecurityModule(address)": {
        "params": {
          "_module": "The address of the interchain security module contract."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferRemote(uint32,bytes32,uint256)": {
        "details": "Delegates transfer logic to `_transferFromSender` implementation.Emits `SentTransferRemote` event on the origin chain.",
        "params": {
          "_amountOrId": "The amount or identifier of tokens to be sent to the remote recipient.",
          "_destination": "The identifier of the destination chain.",
          "_recipient": "The address of the recipient on the destination chain."
        },
        "returns": {
          "messageId": "The identifier of the dispatched message."
        }
      },
      "transferRemote(uint32,bytes32,uint256,bytes,address)": {
        "details": "Delegates transfer logic to `_transferFromSender` implementation.The metadata is the token metadata, and is DIFFERENT than the hook metadata.Emits `SentTransferRemote` event on the origin chain.",
        "params": {
          "_amountOrId": "The amount or identifier of tokens to be sent to the remote recipient.",
          "_destination": "The identifier of the destination chain.",
          "_hook": "The post dispatch hook to be called by the Mailbox",
          "_hookMetadata": "The metadata passed into the hook",
          "_recipient": "The address of the recipient on the destination chain."
        },
        "returns": {
          "messageId": "The identifier of the dispatched message."
        }
      },
      "unenrollRemoteRouter(uint32)": {
        "params": {
          "_domain": "The domain of the remote Application Router"
        }
      },
      "unenrollRemoteRouters(uint32[])": {
        "params": {
          "_domains": "The domains of the remote Application Routers"
        }
      }
    },
    "title": "Unofficial and UNAUDITED Hyperlane ERC1155 Token Router",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "enrollRemoteRouter(uint32,bytes32)": {
        "notice": "Register the address of a Router contract for the same Application on a remote chain"
      },
      "enrollRemoteRouters(uint32[],bytes32[])": {
        "notice": "Batch version of `enrollRemoteRouter`"
      },
      "handle(uint32,bytes32,bytes)": {
        "notice": "Handles an incoming message"
      },
      "quoteGasPayment(uint32)": {
        "notice": "Returns the gas payment required to dispatch a message to the given domain's router."
      },
      "routers(uint32)": {
        "notice": "Returns the address of the Router contract for the given domain"
      },
      "setDestinationGas((uint32,uint256)[])": {
        "notice": "Sets the gas amount dispatched for each configured domain."
      },
      "setDestinationGas(uint32,uint256)": {
        "notice": "Sets the gas amount dispatched for each configured domain."
      },
      "setHook(address)": {
        "notice": "Sets the address of the application's custom hook."
      },
      "setInterchainSecurityModule(address)": {
        "notice": "Sets the address of the application's custom interchain security module."
      },
      "transferRemote(uint32,bytes32,uint256)": {
        "notice": "Transfers `_amountOrId` token to `_recipient` on `_destination` domain."
      },
      "transferRemote(uint32,bytes32,uint256,bytes,address)": {
        "notice": "Transfers `_amountOrId` token to `_recipient` on `_destination` domain with a specified hook"
      },
      "unenrollRemoteRouter(uint32)": {
        "notice": "Unregister the domain"
      },
      "unenrollRemoteRouters(uint32[])": {
        "notice": "Batch version of `unenrollRemoteRouter`"
      }
    },
    "notice": "Enables cross-chain ERC1155 token transfers using Hyperlane's messaging protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2935,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2938,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7315,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7589,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3127,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3133,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3135,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 4342,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 4520,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4683,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2807,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 2927,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 227,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "hook",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(IPostDispatchHook)1378"
      },
      {
        "astId": 230,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "interchainSecurityModule",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IInterchainSecurityModule)1143"
      },
      {
        "astId": 234,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "__GAP",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 438,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "_routers",
        "offset": 0,
        "slot": "301",
        "type": "t_struct(UintToBytes32Map)1394_storage"
      },
      {
        "astId": 442,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "__GAP",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 24,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "destinationGas",
        "offset": 0,
        "slot": "352",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 17512,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "_name",
        "offset": 0,
        "slot": "353",
        "type": "t_string_storage"
      },
      {
        "astId": 17514,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "_symbol",
        "offset": 0,
        "slot": "354",
        "type": "t_string_storage"
      },
      {
        "astId": 17518,
        "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "355",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IInterchainSecurityModule)1143": {
        "encoding": "inplace",
        "label": "contract IInterchainSecurityModule",
        "numberOfBytes": "20"
      },
      "t_contract(IPostDispatchHook)1378": {
        "encoding": "inplace",
        "label": "contract IPostDispatchHook",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)17089_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 17088,
            "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)16895_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)15642_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 15637,
            "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)17089_storage"
          },
          {
            "astId": 15641,
            "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)16895_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 16890,
            "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 16894,
            "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToBytes32Map)1394_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMapExtended.UintToBytes32Map",
        "members": [
          {
            "astId": 1393,
            "contract": "contracts/ExampleHypERC1155.sol:HypERC1155",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)15642_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}