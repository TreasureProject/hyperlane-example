{
  "address": "0xd117Ee788E6e4BB24f65D744e009219861697D24",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_mailbox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        }
      ],
      "name": "GasSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_hook",
          "type": "address"
        }
      ],
      "name": "HookSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_ism",
          "type": "address"
        }
      ],
      "name": "IsmSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "origin",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "recipient",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReceivedTransferRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "destination",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "recipient",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SentTransferRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PACKAGE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "destinationGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domains",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_router",
          "type": "bytes32"
        }
      ],
      "name": "enrollRemoteRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_domains",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_addresses",
          "type": "bytes32[]"
        }
      ],
      "name": "enrollRemoteRouters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hook",
      "outputs": [
        {
          "internalType": "contract IPostDispatchHook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_hook",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interchainSecurityModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interchainSecurityModule",
      "outputs": [
        {
          "internalType": "contract IInterchainSecurityModule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mailbox",
      "outputs": [
        {
          "internalType": "contract IMailbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destinationDomain",
          "type": "uint32"
        }
      ],
      "name": "quoteGasPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        }
      ],
      "name": "routers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        }
      ],
      "name": "setDestinationGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            }
          ],
          "internalType": "struct GasRouter.GasRouterConfig[]",
          "name": "gasConfigs",
          "type": "tuple[]"
        }
      ],
      "name": "setDestinationGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hook",
          "type": "address"
        }
      ],
      "name": "setHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        }
      ],
      "name": "setInterchainSecurityModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_recipient",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountOrId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_hookMetadata",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_hook",
          "type": "address"
        }
      ],
      "name": "transferRemote",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_recipient",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountOrId",
          "type": "uint256"
        }
      ],
      "name": "transferRemote",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        }
      ],
      "name": "unenrollRemoteRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_domains",
          "type": "uint32[]"
        }
      ],
      "name": "unenrollRemoteRouters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcbf76632dd28e91cb2074b1e00e42de165633a94405a319be6510841acdac8a5",
  "receipt": {
    "to": null,
    "from": "0x070337669A3e72249F39434Aa2CA326Ab68f09F8",
    "contractAddress": "0xd117Ee788E6e4BB24f65D744e009219861697D24",
    "transactionIndex": 68,
    "gasUsed": "2570337",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000008000000000000000000000002000000000000000000000000000000000000001000000000000000000000000004000000000020000000000000000000800000000000800000000000000000000400000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000080000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1b32c45e531762607865c73b6af40dcafb6b989e86e478999ae123f861e1dd02",
    "transactionHash": "0xcbf76632dd28e91cb2074b1e00e42de165633a94405a319be6510841acdac8a5",
    "logs": [
      {
        "transactionIndex": 68,
        "blockNumber": 7484244,
        "transactionHash": "0xcbf76632dd28e91cb2074b1e00e42de165633a94405a319be6510841acdac8a5",
        "address": "0xd117Ee788E6e4BB24f65D744e009219861697D24",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000070337669a3e72249f39434aa2ca326ab68f09f8"
        ],
        "data": "0x",
        "logIndex": 73,
        "blockHash": "0x1b32c45e531762607865c73b6af40dcafb6b989e86e478999ae123f861e1dd02"
      }
    ],
    "blockNumber": 7484244,
    "cumulativeGasUsed": "8204930",
    "status": 1,
    "byzantium": true
  },
  "args": [
    18,
    "0xfFAEF09B3cd11D9b20d1a19bECca54EEC2884766"
  ],
  "numDeployments": 1,
  "solcInputHash": "f36596e87a50f6d6b3c1789aa64a9361",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_mailbox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"GasSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"HookSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ism\",\"type\":\"address\"}],\"name\":\"IsmSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedTransferRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SentTransferRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PACKAGE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"destinationGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domains\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_router\",\"type\":\"bytes32\"}],\"name\":\"enrollRemoteRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_domains\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_addresses\",\"type\":\"bytes32[]\"}],\"name\":\"enrollRemoteRouters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hook\",\"outputs\":[{\"internalType\":\"contract IPostDispatchHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interchainSecurityModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interchainSecurityModule\",\"outputs\":[{\"internalType\":\"contract IInterchainSecurityModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailbox\",\"outputs\":[{\"internalType\":\"contract IMailbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destinationDomain\",\"type\":\"uint32\"}],\"name\":\"quoteGasPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"routers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDestinationGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"internalType\":\"struct GasRouter.GasRouterConfig[]\",\"name\":\"gasConfigs\",\"type\":\"tuple[]\"}],\"name\":\"setDestinationGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"setHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"setInterchainSecurityModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountOrId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_hookMetadata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"transferRemote\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountOrId\",\"type\":\"uint256\"}],\"name\":\"transferRemote\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"unenrollRemoteRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_domains\",\"type\":\"uint32[]\"}],\"name\":\"unenrollRemoteRouters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"ReceivedTransferRemote(uint32,bytes32,uint256)\":{\"details\":\"Emitted on `_handle` when a transfer message is processed.\",\"params\":{\"amount\":\"The amount of tokens minted on the destination chain.\",\"origin\":\"The identifier of the origin chain.\",\"recipient\":\"The address of the recipient on the destination chain.\"}},\"SentTransferRemote(uint32,bytes32,uint256)\":{\"details\":\"Emitted on `transferRemote` when a transfer message is dispatched.\",\"params\":{\"amount\":\"The amount of tokens burnt on the origin chain.\",\"destination\":\"The identifier of the destination chain.\",\"recipient\":\"The address of the recipient on the destination chain.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"enrollRemoteRouter(uint32,bytes32)\":{\"params\":{\"_domain\":\"The domain of the remote Application Router\",\"_router\":\"The address of the remote Application Router\"}},\"enrollRemoteRouters(uint32[],bytes32[])\":{\"params\":{\"_addresses\":\"The addresses of the remote Application Routers\",\"_domains\":\"The domains of the remote Application Routers\"}},\"handle(uint32,bytes32,bytes)\":{\"params\":{\"_message\":\"The message\",\"_origin\":\"The origin domain\",\"_sender\":\"The sender address\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(uint256,string,string,address,address,address)\":{\"params\":{\"_name\":\"The name of the token.\",\"_symbol\":\"The symbol of the token.\",\"_totalSupply\":\"The initial supply of the token.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quoteGasPayment(uint32)\":{\"params\":{\"_destinationDomain\":\"The domain of the router.\"},\"returns\":{\"_0\":\"_gasPayment Payment computed by the registered InterchainGasPaymaster.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"routers(uint32)\":{\"details\":\"Returns 0 address if no router is enrolled for the given domain\",\"params\":{\"_domain\":\"The remote domain ID.\"},\"returns\":{\"_0\":\"router The address of the Router contract for the given domain\"}},\"setDestinationGas((uint32,uint256)[])\":{\"params\":{\"gasConfigs\":\"The array of GasRouterConfig structs\"}},\"setDestinationGas(uint32,uint256)\":{\"params\":{\"domain\":\"The destination domain ID\",\"gas\":\"The gas limit\"}},\"setHook(address)\":{\"params\":{\"_hook\":\"The address of the hook contract.\"}},\"setInterchainSecurityModule(address)\":{\"params\":{\"_module\":\"The address of the interchain security module contract.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferRemote(uint32,bytes32,uint256)\":{\"details\":\"Delegates transfer logic to `_transferFromSender` implementation.Emits `SentTransferRemote` event on the origin chain.\",\"params\":{\"_amountOrId\":\"The amount or identifier of tokens to be sent to the remote recipient.\",\"_destination\":\"The identifier of the destination chain.\",\"_recipient\":\"The address of the recipient on the destination chain.\"},\"returns\":{\"messageId\":\"The identifier of the dispatched message.\"}},\"transferRemote(uint32,bytes32,uint256,bytes,address)\":{\"details\":\"Delegates transfer logic to `_transferFromSender` implementation.The metadata is the token metadata, and is DIFFERENT than the hook metadata.Emits `SentTransferRemote` event on the origin chain.\",\"params\":{\"_amountOrId\":\"The amount or identifier of tokens to be sent to the remote recipient.\",\"_destination\":\"The identifier of the destination chain.\",\"_hook\":\"The post dispatch hook to be called by the Mailbox\",\"_hookMetadata\":\"The metadata passed into the hook\",\"_recipient\":\"The address of the recipient on the destination chain.\"},\"returns\":{\"messageId\":\"The identifier of the dispatched message.\"}},\"unenrollRemoteRouter(uint32)\":{\"params\":{\"_domain\":\"The domain of the remote Application Router\"}},\"unenrollRemoteRouters(uint32[])\":{\"params\":{\"_domains\":\"The domains of the remote Application Routers\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"enrollRemoteRouter(uint32,bytes32)\":{\"notice\":\"Register the address of a Router contract for the same Application on a remote chain\"},\"enrollRemoteRouters(uint32[],bytes32[])\":{\"notice\":\"Batch version of `enrollRemoteRouter`\"},\"handle(uint32,bytes32,bytes)\":{\"notice\":\"Handles an incoming message\"},\"initialize(uint256,string,string,address,address,address)\":{\"notice\":\"Initializes the Hyperlane router, ERC20 metadata, and mints initial supply to deployer.\"},\"quoteGasPayment(uint32)\":{\"notice\":\"Returns the gas payment required to dispatch a message to the given domain's router.\"},\"routers(uint32)\":{\"notice\":\"Returns the address of the Router contract for the given domain\"},\"setDestinationGas((uint32,uint256)[])\":{\"notice\":\"Sets the gas amount dispatched for each configured domain.\"},\"setDestinationGas(uint32,uint256)\":{\"notice\":\"Sets the gas amount dispatched for each configured domain.\"},\"setHook(address)\":{\"notice\":\"Sets the address of the application's custom hook.\"},\"setInterchainSecurityModule(address)\":{\"notice\":\"Sets the address of the application's custom interchain security module.\"},\"transferRemote(uint32,bytes32,uint256)\":{\"notice\":\"Transfers `_amountOrId` token to `_recipient` on `_destination` domain.\"},\"transferRemote(uint32,bytes32,uint256,bytes,address)\":{\"notice\":\"Transfers `_amountOrId` token to `_recipient` on `_destination` domain with a specified hook\"},\"unenrollRemoteRouter(uint32)\":{\"notice\":\"Unregister the domain\"},\"unenrollRemoteRouters(uint32[])\":{\"notice\":\"Batch version of `unenrollRemoteRouter`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MyCustomHypERC20.sol\":\"MyCustomHypERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@hyperlane-xyz/core/contracts/PackageVersioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/**\\n * @title PackageVersioned\\n * @notice Package version getter for contracts\\n **/\\nabstract contract PackageVersioned {\\n    // GENERATED CODE - DO NOT EDIT\\n    string public constant PACKAGE_VERSION = \\\"5.8.3\\\";\\n}\\n\",\"keccak256\":\"0x0fe3aef21081f1518687ad5c2e9dd18060796506fafdb2fe29336d5a2b3fc563\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/client/GasRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\n// ============ Internal Imports ============\\nimport {Router} from \\\"./Router.sol\\\";\\nimport {StandardHookMetadata} from \\\"../hooks/libs/StandardHookMetadata.sol\\\";\\n\\nabstract contract GasRouter is Router {\\n    event GasSet(uint32 domain, uint256 gas);\\n\\n    // ============ Mutable Storage ============\\n    mapping(uint32 => uint256) public destinationGas;\\n\\n    struct GasRouterConfig {\\n        uint32 domain;\\n        uint256 gas;\\n    }\\n\\n    constructor(address _mailbox) Router(_mailbox) {}\\n\\n    /**\\n     * @notice Sets the gas amount dispatched for each configured domain.\\n     * @param gasConfigs The array of GasRouterConfig structs\\n     */\\n    function setDestinationGas(\\n        GasRouterConfig[] calldata gasConfigs\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < gasConfigs.length; i += 1) {\\n            _setDestinationGas(gasConfigs[i].domain, gasConfigs[i].gas);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the gas amount dispatched for each configured domain.\\n     * @param domain The destination domain ID\\n     * @param gas The gas limit\\n     */\\n    function setDestinationGas(uint32 domain, uint256 gas) external onlyOwner {\\n        _setDestinationGas(domain, gas);\\n    }\\n\\n    /**\\n     * @notice Returns the gas payment required to dispatch a message to the given domain's router.\\n     * @param _destinationDomain The domain of the router.\\n     * @return _gasPayment Payment computed by the registered InterchainGasPaymaster.\\n     */\\n    function quoteGasPayment(\\n        uint32 _destinationDomain\\n    ) external view returns (uint256) {\\n        return _GasRouter_quoteDispatch(_destinationDomain, \\\"\\\", address(hook));\\n    }\\n\\n    function _GasRouter_hookMetadata(\\n        uint32 _destination\\n    ) internal view returns (bytes memory) {\\n        return\\n            StandardHookMetadata.overrideGasLimit(destinationGas[_destination]);\\n    }\\n\\n    function _setDestinationGas(uint32 domain, uint256 gas) internal {\\n        destinationGas[domain] = gas;\\n        emit GasSet(domain, gas);\\n    }\\n\\n    function _GasRouter_dispatch(\\n        uint32 _destination,\\n        uint256 _value,\\n        bytes memory _messageBody,\\n        address _hook\\n    ) internal returns (bytes32) {\\n        return\\n            _Router_dispatch(\\n                _destination,\\n                _value,\\n                _messageBody,\\n                _GasRouter_hookMetadata(_destination),\\n                _hook\\n            );\\n    }\\n\\n    function _GasRouter_quoteDispatch(\\n        uint32 _destination,\\n        bytes memory _messageBody,\\n        address _hook\\n    ) internal view returns (uint256) {\\n        return\\n            _Router_quoteDispatch(\\n                _destination,\\n                _messageBody,\\n                _GasRouter_hookMetadata(_destination),\\n                _hook\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x09e9b8850c87c7fe746d2a61bd475a439ec850b8f1df3e0a502bd752efeab730\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/client/MailboxClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\n// ============ Internal Imports ============\\nimport {IMailbox} from \\\"../interfaces/IMailbox.sol\\\";\\nimport {IPostDispatchHook} from \\\"../interfaces/hooks/IPostDispatchHook.sol\\\";\\nimport {IInterchainSecurityModule} from \\\"../interfaces/IInterchainSecurityModule.sol\\\";\\nimport {Message} from \\\"../libs/Message.sol\\\";\\nimport {PackageVersioned} from \\\"../PackageVersioned.sol\\\";\\n\\n// ============ External Imports ============\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract MailboxClient is OwnableUpgradeable, PackageVersioned {\\n    using Message for bytes;\\n\\n    event HookSet(address _hook);\\n    event IsmSet(address _ism);\\n\\n    IMailbox public immutable mailbox;\\n\\n    uint32 public immutable localDomain;\\n\\n    IPostDispatchHook public hook;\\n\\n    IInterchainSecurityModule public interchainSecurityModule;\\n\\n    uint256[48] private __GAP; // gap for upgrade safety\\n\\n    // ============ Modifiers ============\\n    modifier onlyContract(address _contract) {\\n        require(\\n            Address.isContract(_contract),\\n            \\\"MailboxClient: invalid mailbox\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyContractOrNull(address _contract) {\\n        require(\\n            Address.isContract(_contract) || _contract == address(0),\\n            \\\"MailboxClient: invalid contract setting\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only accept messages from an Hyperlane Mailbox contract\\n     */\\n    modifier onlyMailbox() {\\n        require(\\n            msg.sender == address(mailbox),\\n            \\\"MailboxClient: sender not mailbox\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _mailbox) onlyContract(_mailbox) {\\n        mailbox = IMailbox(_mailbox);\\n        localDomain = mailbox.localDomain();\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the application's custom hook.\\n     * @param _hook The address of the hook contract.\\n     */\\n    function setHook(\\n        address _hook\\n    ) public virtual onlyContractOrNull(_hook) onlyOwner {\\n        hook = IPostDispatchHook(_hook);\\n        emit HookSet(_hook);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the application's custom interchain security module.\\n     * @param _module The address of the interchain security module contract.\\n     */\\n    function setInterchainSecurityModule(\\n        address _module\\n    ) public onlyContractOrNull(_module) onlyOwner {\\n        interchainSecurityModule = IInterchainSecurityModule(_module);\\n        emit IsmSet(_module);\\n    }\\n\\n    // ======== Initializer =========\\n    function _MailboxClient_initialize(\\n        address _hook,\\n        address _interchainSecurityModule,\\n        address _owner\\n    ) internal onlyInitializing {\\n        __Ownable_init();\\n        setHook(_hook);\\n        setInterchainSecurityModule(_interchainSecurityModule);\\n        _transferOwnership(_owner);\\n    }\\n\\n    function _isLatestDispatched(bytes32 id) internal view returns (bool) {\\n        return mailbox.latestDispatchedId() == id;\\n    }\\n\\n    function _isDelivered(bytes32 id) internal view returns (bool) {\\n        return mailbox.delivered(id);\\n    }\\n}\\n\",\"keccak256\":\"0x2d7d3dadcc112ace41a3dcf16ac3f48bb1f5d1e5bdc7dc29b61b5cfed74456fa\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/client/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {IMessageRecipient} from \\\"../interfaces/IMessageRecipient.sol\\\";\\nimport {IPostDispatchHook} from \\\"../interfaces/hooks/IPostDispatchHook.sol\\\";\\nimport {IInterchainSecurityModule} from \\\"../interfaces/IInterchainSecurityModule.sol\\\";\\nimport {MailboxClient} from \\\"./MailboxClient.sol\\\";\\nimport {EnumerableMapExtended} from \\\"../libs/EnumerableMapExtended.sol\\\";\\n\\n// ============ External Imports ============\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nabstract contract Router is MailboxClient, IMessageRecipient {\\n    using EnumerableMapExtended for EnumerableMapExtended.UintToBytes32Map;\\n    using Strings for uint32;\\n\\n    // ============ Mutable Storage ============\\n    EnumerableMapExtended.UintToBytes32Map internal _routers;\\n\\n    uint256[48] private __GAP; // gap for upgrade safety\\n\\n    constructor(address _mailbox) MailboxClient(_mailbox) {}\\n\\n    // ============ External functions ============\\n    function domains() external view returns (uint32[] memory) {\\n        return _routers.uint32Keys();\\n    }\\n\\n    /**\\n     * @notice Returns the address of the Router contract for the given domain\\n     * @param _domain The remote domain ID.\\n     * @dev Returns 0 address if no router is enrolled for the given domain\\n     * @return router The address of the Router contract for the given domain\\n     */\\n    function routers(uint32 _domain) public view virtual returns (bytes32) {\\n        (, bytes32 _router) = _routers.tryGet(_domain);\\n        return _router;\\n    }\\n\\n    /**\\n     * @notice Unregister the domain\\n     * @param _domain The domain of the remote Application Router\\n     */\\n    function unenrollRemoteRouter(uint32 _domain) external virtual onlyOwner {\\n        _unenrollRemoteRouter(_domain);\\n    }\\n\\n    /**\\n     * @notice Register the address of a Router contract for the same Application on a remote chain\\n     * @param _domain The domain of the remote Application Router\\n     * @param _router The address of the remote Application Router\\n     */\\n    function enrollRemoteRouter(\\n        uint32 _domain,\\n        bytes32 _router\\n    ) external virtual onlyOwner {\\n        _enrollRemoteRouter(_domain, _router);\\n    }\\n\\n    /**\\n     * @notice Batch version of `enrollRemoteRouter`\\n     * @param _domains The domains of the remote Application Routers\\n     * @param _addresses The addresses of the remote Application Routers\\n     */\\n    function enrollRemoteRouters(\\n        uint32[] calldata _domains,\\n        bytes32[] calldata _addresses\\n    ) external virtual onlyOwner {\\n        require(_domains.length == _addresses.length, \\\"!length\\\");\\n        uint256 length = _domains.length;\\n        for (uint256 i = 0; i < length; i += 1) {\\n            _enrollRemoteRouter(_domains[i], _addresses[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch version of `unenrollRemoteRouter`\\n     * @param _domains The domains of the remote Application Routers\\n     */\\n    function unenrollRemoteRouters(\\n        uint32[] calldata _domains\\n    ) external virtual onlyOwner {\\n        uint256 length = _domains.length;\\n        for (uint256 i = 0; i < length; i += 1) {\\n            _unenrollRemoteRouter(_domains[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Handles an incoming message\\n     * @param _origin The origin domain\\n     * @param _sender The sender address\\n     * @param _message The message\\n     */\\n    function handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes calldata _message\\n    ) external payable virtual override onlyMailbox {\\n        bytes32 _router = _mustHaveRemoteRouter(_origin);\\n        require(_router == _sender, \\\"Enrolled router does not match sender\\\");\\n        _handle(_origin, _sender, _message);\\n    }\\n\\n    // ============ Virtual functions ============\\n    function _handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes calldata _message\\n    ) internal virtual;\\n\\n    // ============ Internal functions ============\\n\\n    /**\\n     * @notice Set the router for a given domain\\n     * @param _domain The domain\\n     * @param _address The new router\\n     */\\n    function _enrollRemoteRouter(\\n        uint32 _domain,\\n        bytes32 _address\\n    ) internal virtual {\\n        _routers.set(_domain, _address);\\n    }\\n\\n    /**\\n     * @notice Remove the router for a given domain\\n     * @param _domain The domain\\n     */\\n    function _unenrollRemoteRouter(uint32 _domain) internal virtual {\\n        require(_routers.remove(_domain), _domainNotFoundError(_domain));\\n    }\\n\\n    /**\\n     * @notice Return true if the given domain / router is the address of a remote Application Router\\n     * @param _domain The domain of the potential remote Application Router\\n     * @param _address The address of the potential remote Application Router\\n     */\\n    function _isRemoteRouter(\\n        uint32 _domain,\\n        bytes32 _address\\n    ) internal view returns (bool) {\\n        return routers(_domain) == _address;\\n    }\\n\\n    /**\\n     * @notice Assert that the given domain has a Application Router registered and return its address\\n     * @param _domain The domain of the chain for which to get the Application Router\\n     * @return _router The address of the remote Application Router on _domain\\n     */\\n    function _mustHaveRemoteRouter(\\n        uint32 _domain\\n    ) internal view returns (bytes32) {\\n        (bool contained, bytes32 _router) = _routers.tryGet(_domain);\\n        if (contained) {\\n            return _router;\\n        }\\n        revert(_domainNotFoundError(_domain));\\n    }\\n\\n    function _domainNotFoundError(\\n        uint32 _domain\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"No router enrolled for domain: \\\",\\n                _domain.toString()\\n            );\\n    }\\n\\n    function _Router_dispatch(\\n        uint32 _destinationDomain,\\n        uint256 _value,\\n        bytes memory _messageBody,\\n        bytes memory _hookMetadata,\\n        address _hook\\n    ) internal returns (bytes32) {\\n        bytes32 _router = _mustHaveRemoteRouter(_destinationDomain);\\n        return\\n            mailbox.dispatch{value: _value}(\\n                _destinationDomain,\\n                _router,\\n                _messageBody,\\n                _hookMetadata,\\n                IPostDispatchHook(_hook)\\n            );\\n    }\\n\\n    /**\\n     * DEPRECATED: Use `_Router_dispatch` instead\\n     * @dev For backward compatibility with v2 client contracts\\n     */\\n    function _dispatch(\\n        uint32 _destinationDomain,\\n        bytes memory _messageBody\\n    ) internal returns (bytes32) {\\n        return\\n            _Router_dispatch(\\n                _destinationDomain,\\n                msg.value,\\n                _messageBody,\\n                \\\"\\\",\\n                address(hook)\\n            );\\n    }\\n\\n    function _Router_quoteDispatch(\\n        uint32 _destinationDomain,\\n        bytes memory _messageBody,\\n        bytes memory _hookMetadata,\\n        address _hook\\n    ) internal view returns (uint256) {\\n        bytes32 _router = _mustHaveRemoteRouter(_destinationDomain);\\n        return\\n            mailbox.quoteDispatch(\\n                _destinationDomain,\\n                _router,\\n                _messageBody,\\n                _hookMetadata,\\n                IPostDispatchHook(_hook)\\n            );\\n    }\\n\\n    /**\\n     * DEPRECATED: Use `_Router_quoteDispatch` instead\\n     * @dev For backward compatibility with v2 client contracts\\n     */\\n    function _quoteDispatch(\\n        uint32 _destinationDomain,\\n        bytes memory _messageBody\\n    ) internal view returns (uint256) {\\n        return\\n            _Router_quoteDispatch(\\n                _destinationDomain,\\n                _messageBody,\\n                \\\"\\\",\\n                address(hook)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf77b69f100a3dbd4ed9a24863890c2931c1cf5b87f8acd06dd2ebf7a7b039fe0\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/hooks/libs/StandardHookMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\n/**\\n * Format of metadata:\\n *\\n * [0:2] variant\\n * [2:34] msg.value\\n * [34:66] Gas limit for message (IGP)\\n * [66:86] Refund address for message (IGP)\\n * [86:] Custom metadata\\n */\\nlibrary StandardHookMetadata {\\n    struct Metadata {\\n        uint16 variant;\\n        uint256 msgValue;\\n        uint256 gasLimit;\\n        address refundAddress;\\n    }\\n\\n    uint8 private constant VARIANT_OFFSET = 0;\\n    uint8 private constant MSG_VALUE_OFFSET = 2;\\n    uint8 private constant GAS_LIMIT_OFFSET = 34;\\n    uint8 private constant REFUND_ADDRESS_OFFSET = 66;\\n    uint256 private constant MIN_METADATA_LENGTH = 86;\\n\\n    uint16 public constant VARIANT = 1;\\n\\n    /**\\n     * @notice Returns the variant of the metadata.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @return variant of the metadata as uint8.\\n     */\\n    function variant(bytes calldata _metadata) internal pure returns (uint16) {\\n        if (_metadata.length < VARIANT_OFFSET + 2) return 0;\\n        return uint16(bytes2(_metadata[VARIANT_OFFSET:VARIANT_OFFSET + 2]));\\n    }\\n\\n    /**\\n     * @notice Returns the specified value for the message.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @param _default Default fallback value.\\n     * @return Value for the message as uint256.\\n     */\\n    function msgValue(\\n        bytes calldata _metadata,\\n        uint256 _default\\n    ) internal pure returns (uint256) {\\n        if (_metadata.length < MSG_VALUE_OFFSET + 32) return _default;\\n        return\\n            uint256(bytes32(_metadata[MSG_VALUE_OFFSET:MSG_VALUE_OFFSET + 32]));\\n    }\\n\\n    /**\\n     * @notice Returns the specified gas limit for the message.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @param _default Default fallback gas limit.\\n     * @return Gas limit for the message as uint256.\\n     */\\n    function gasLimit(\\n        bytes calldata _metadata,\\n        uint256 _default\\n    ) internal pure returns (uint256) {\\n        if (_metadata.length < GAS_LIMIT_OFFSET + 32) return _default;\\n        return\\n            uint256(bytes32(_metadata[GAS_LIMIT_OFFSET:GAS_LIMIT_OFFSET + 32]));\\n    }\\n\\n    /**\\n     * @notice Returns the specified refund address for the message.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @param _default Default fallback refund address.\\n     * @return Refund address for the message as address.\\n     */\\n    function refundAddress(\\n        bytes calldata _metadata,\\n        address _default\\n    ) internal pure returns (address) {\\n        if (_metadata.length < REFUND_ADDRESS_OFFSET + 20) return _default;\\n        return\\n            address(\\n                bytes20(\\n                    _metadata[REFUND_ADDRESS_OFFSET:REFUND_ADDRESS_OFFSET + 20]\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns any custom metadata.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @return Custom metadata.\\n     */\\n    function getCustomMetadata(\\n        bytes calldata _metadata\\n    ) internal pure returns (bytes calldata) {\\n        if (_metadata.length < MIN_METADATA_LENGTH) return _metadata[0:0];\\n        return _metadata[MIN_METADATA_LENGTH:];\\n    }\\n\\n    /**\\n     * @notice Formats the specified gas limit and refund address into standard hook metadata.\\n     * @param _msgValue msg.value for the message.\\n     * @param _gasLimit Gas limit for the message.\\n     * @param _refundAddress Refund address for the message.\\n     * @param _customMetadata Additional metadata to include in the standard hook metadata.\\n     * @return ABI encoded standard hook metadata.\\n     */\\n    function formatMetadata(\\n        uint256 _msgValue,\\n        uint256 _gasLimit,\\n        address _refundAddress,\\n        bytes memory _customMetadata\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                VARIANT,\\n                _msgValue,\\n                _gasLimit,\\n                _refundAddress,\\n                _customMetadata\\n            );\\n    }\\n\\n    /**\\n     * @notice Formats the specified gas limit and refund address into standard hook metadata.\\n     * @param _msgValue msg.value for the message.\\n     * @return ABI encoded standard hook metadata.\\n     */\\n    function overrideMsgValue(\\n        uint256 _msgValue\\n    ) internal view returns (bytes memory) {\\n        return formatMetadata(_msgValue, uint256(0), msg.sender, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Formats the specified gas limit and refund address into standard hook metadata.\\n     * @param _gasLimit Gas limit for the message.\\n     * @return ABI encoded standard hook metadata.\\n     */\\n    function overrideGasLimit(\\n        uint256 _gasLimit\\n    ) internal view returns (bytes memory) {\\n        return formatMetadata(uint256(0), _gasLimit, msg.sender, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Formats the specified refund address into standard hook metadata.\\n     * @param _refundAddress Refund address for the message.\\n     * @return ABI encoded standard hook metadata.\\n     */\\n    function overrideRefundAddress(\\n        address _refundAddress\\n    ) internal pure returns (bytes memory) {\\n        return formatMetadata(uint256(0), uint256(0), _refundAddress, \\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x28e8be5b70f6b5b7c6a52c4906635639ae5ef3fe2ac970b7c30299e939b38e42\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IInterchainSecurityModule {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        LEGACY_MULTISIG,\\n        MERKLE_ROOT_MULTISIG,\\n        MESSAGE_ID_MULTISIG,\\n        NULL, // used with relayer carrying no metadata\\n        CCIP_READ,\\n        ARB_L2_TO_L1,\\n        WEIGHTED_MERKLE_ROOT_MULTISIG,\\n        WEIGHTED_MESSAGE_ID_MULTISIG,\\n        OP_L2_TO_L1\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8);\\n\\n    /**\\n     * @notice Defines a security model responsible for verifying interchain\\n     * messages based on the provided metadata.\\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\\n     * the security model encoded by the module (e.g. validator signatures)\\n     * @param _message Hyperlane encoded interchain message\\n     * @return True if the message was verified\\n     */\\n    function verify(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external returns (bool);\\n}\\n\\ninterface ISpecifiesInterchainSecurityModule {\\n    function interchainSecurityModule()\\n        external\\n        view\\n        returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0x1996b75eef35e7769ea2c6e76d4e8ae62a8db6176b1d0b5c5d2e9fcb0c237c9a\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {IInterchainSecurityModule} from \\\"./IInterchainSecurityModule.sol\\\";\\nimport {IPostDispatchHook} from \\\"./hooks/IPostDispatchHook.sol\\\";\\n\\ninterface IMailbox {\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param sender The address that dispatched the message\\n     * @param destination The destination domain of the message\\n     * @param recipient The message recipient address on `destination`\\n     * @param message Raw bytes of message\\n     */\\n    event Dispatch(\\n        address indexed sender,\\n        uint32 indexed destination,\\n        bytes32 indexed recipient,\\n        bytes message\\n    );\\n\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param messageId The unique message identifier\\n     */\\n    event DispatchId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is processed\\n     * @param messageId The unique message identifier\\n     */\\n    event ProcessId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is delivered\\n     * @param origin The origin domain of the message\\n     * @param sender The message sender address on `origin`\\n     * @param recipient The address that handled the message\\n     */\\n    event Process(\\n        uint32 indexed origin,\\n        bytes32 indexed sender,\\n        address indexed recipient\\n    );\\n\\n    function localDomain() external view returns (uint32);\\n\\n    function delivered(bytes32 messageId) external view returns (bool);\\n\\n    function defaultIsm() external view returns (IInterchainSecurityModule);\\n\\n    function defaultHook() external view returns (IPostDispatchHook);\\n\\n    function requiredHook() external view returns (IPostDispatchHook);\\n\\n    function latestDispatchedId() external view returns (bytes32);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata defaultHookMetadata\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata defaultHookMetadata\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external view returns (uint256 fee);\\n\\n    function process(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    function recipientIsm(\\n        address recipient\\n    ) external view returns (IInterchainSecurityModule module);\\n}\\n\",\"keccak256\":\"0x9cd728ba304279775818f8c7b4c02f8c5dd2b28e051ec466dbe36129be01a6ee\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IMessageRecipient {\\n    function handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes calldata _message\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x145e8332a91295a710deb3cb1ab689144262ef6ec66d9570c600b778e9dd964d\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/hooks/IPostDispatchHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\ninterface IPostDispatchHook {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        MERKLE_TREE,\\n        INTERCHAIN_GAS_PAYMASTER,\\n        FALLBACK_ROUTING,\\n        ID_AUTH_ISM,\\n        PAUSABLE,\\n        PROTOCOL_FEE,\\n        LAYER_ZERO_V1,\\n        RATE_LIMITED,\\n        ARB_L2_TO_L1,\\n        OP_L2_TO_L1\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of hook\\n     */\\n    function hookType() external view returns (uint8);\\n\\n    /**\\n     * @notice Returns whether the hook supports metadata\\n     * @param metadata metadata\\n     * @return Whether the hook supports metadata\\n     */\\n    function supportsMetadata(\\n        bytes calldata metadata\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Post action after a message is dispatched via the Mailbox\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     */\\n    function postDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    /**\\n     * @notice Compute the payment required by the postDispatch call\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     * @return Quoted payment for the postDispatch call\\n     */\\n    function quoteDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb5df1226b2e73559f2577ef168b5f402df05b7d2bf6bd1d30baf44439aea537b\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/libs/EnumerableMapExtended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ External Imports ============\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// extends EnumerableMap with uint256 => bytes32 type\\n// modelled after https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.0/contracts/utils/structs/EnumerableMap.sol\\nlibrary EnumerableMapExtended {\\n    using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    struct UintToBytes32Map {\\n        EnumerableMap.Bytes32ToBytes32Map _inner;\\n    }\\n\\n    // ============ Library Functions ============\\n    function keys(\\n        UintToBytes32Map storage map\\n    ) internal view returns (uint256[] memory _keys) {\\n        uint256 _length = map._inner.length();\\n        _keys = new uint256[](_length);\\n        for (uint256 i = 0; i < _length; i++) {\\n            _keys[i] = uint256(map._inner._keys.at(i));\\n        }\\n    }\\n\\n    function uint32Keys(\\n        UintToBytes32Map storage map\\n    ) internal view returns (uint32[] memory _keys) {\\n        uint256[] memory uint256keys = keys(map);\\n        _keys = new uint32[](uint256keys.length);\\n        for (uint256 i = 0; i < uint256keys.length; i++) {\\n            _keys[i] = uint32(uint256keys[i]);\\n        }\\n    }\\n\\n    function set(\\n        UintToBytes32Map storage map,\\n        uint256 key,\\n        bytes32 value\\n    ) internal {\\n        map._inner.set(bytes32(key), value);\\n    }\\n\\n    function get(\\n        UintToBytes32Map storage map,\\n        uint256 key\\n    ) internal view returns (bytes32) {\\n        return map._inner.get(bytes32(key));\\n    }\\n\\n    function tryGet(\\n        UintToBytes32Map storage map,\\n        uint256 key\\n    ) internal view returns (bool, bytes32) {\\n        return map._inner.tryGet(bytes32(key));\\n    }\\n\\n    function remove(\\n        UintToBytes32Map storage map,\\n        uint256 key\\n    ) internal returns (bool) {\\n        return map._inner.remove(bytes32(key));\\n    }\\n\\n    function contains(\\n        UintToBytes32Map storage map,\\n        uint256 key\\n    ) internal view returns (bool) {\\n        return map._inner.contains(bytes32(key));\\n    }\\n\\n    function length(\\n        UintToBytes32Map storage map\\n    ) internal view returns (uint256) {\\n        return map._inner.length();\\n    }\\n\\n    function at(\\n        UintToBytes32Map storage map,\\n        uint256 index\\n    ) internal view returns (uint256, bytes32) {\\n        (bytes32 key, bytes32 value) = map._inner.at(index);\\n        return (uint256(key), value);\\n    }\\n}\\n\",\"keccak256\":\"0xbd661cdeba756caf35191b71a85461a9ff79c047ec98ec05063748dfc0419595\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/libs/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {TypeCasts} from \\\"./TypeCasts.sol\\\";\\n\\n/**\\n * @title Hyperlane Message Library\\n * @notice Library for formatted messages used by Mailbox\\n **/\\nlibrary Message {\\n    using TypeCasts for bytes32;\\n\\n    uint256 private constant VERSION_OFFSET = 0;\\n    uint256 private constant NONCE_OFFSET = 1;\\n    uint256 private constant ORIGIN_OFFSET = 5;\\n    uint256 private constant SENDER_OFFSET = 9;\\n    uint256 private constant DESTINATION_OFFSET = 41;\\n    uint256 private constant RECIPIENT_OFFSET = 45;\\n    uint256 private constant BODY_OFFSET = 77;\\n\\n    /**\\n     * @notice Returns formatted (packed) Hyperlane message with provided fields\\n     * @dev This function should only be used in memory message construction.\\n     * @param _version The version of the origin and destination Mailboxes\\n     * @param _nonce A nonce to uniquely identify the message on its origin chain\\n     * @param _originDomain Domain of origin chain\\n     * @param _sender Address of sender as bytes32\\n     * @param _destinationDomain Domain of destination chain\\n     * @param _recipient Address of recipient on destination chain as bytes32\\n     * @param _messageBody Raw bytes of message body\\n     * @return Formatted message\\n     */\\n    function formatMessage(\\n        uint8 _version,\\n        uint32 _nonce,\\n        uint32 _originDomain,\\n        bytes32 _sender,\\n        uint32 _destinationDomain,\\n        bytes32 _recipient,\\n        bytes calldata _messageBody\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _version,\\n                _nonce,\\n                _originDomain,\\n                _sender,\\n                _destinationDomain,\\n                _recipient,\\n                _messageBody\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the message ID.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return ID of `_message`\\n     */\\n    function id(bytes memory _message) internal pure returns (bytes32) {\\n        return keccak256(_message);\\n    }\\n\\n    /**\\n     * @notice Returns the message version.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Version of `_message`\\n     */\\n    function version(bytes calldata _message) internal pure returns (uint8) {\\n        return uint8(bytes1(_message[VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message nonce.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Nonce of `_message`\\n     */\\n    function nonce(bytes calldata _message) internal pure returns (uint32) {\\n        return uint32(bytes4(_message[NONCE_OFFSET:ORIGIN_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message origin domain.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Origin domain of `_message`\\n     */\\n    function origin(bytes calldata _message) internal pure returns (uint32) {\\n        return uint32(bytes4(_message[ORIGIN_OFFSET:SENDER_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message sender as bytes32.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Sender of `_message` as bytes32\\n     */\\n    function sender(bytes calldata _message) internal pure returns (bytes32) {\\n        return bytes32(_message[SENDER_OFFSET:DESTINATION_OFFSET]);\\n    }\\n\\n    /**\\n     * @notice Returns the message sender as address.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Sender of `_message` as address\\n     */\\n    function senderAddress(\\n        bytes calldata _message\\n    ) internal pure returns (address) {\\n        return sender(_message).bytes32ToAddress();\\n    }\\n\\n    /**\\n     * @notice Returns the message destination domain.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Destination domain of `_message`\\n     */\\n    function destination(\\n        bytes calldata _message\\n    ) internal pure returns (uint32) {\\n        return uint32(bytes4(_message[DESTINATION_OFFSET:RECIPIENT_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message recipient as bytes32.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Recipient of `_message` as bytes32\\n     */\\n    function recipient(\\n        bytes calldata _message\\n    ) internal pure returns (bytes32) {\\n        return bytes32(_message[RECIPIENT_OFFSET:BODY_OFFSET]);\\n    }\\n\\n    /**\\n     * @notice Returns the message recipient as address.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Recipient of `_message` as address\\n     */\\n    function recipientAddress(\\n        bytes calldata _message\\n    ) internal pure returns (address) {\\n        return recipient(_message).bytes32ToAddress();\\n    }\\n\\n    /**\\n     * @notice Returns the message body.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Body of `_message`\\n     */\\n    function body(\\n        bytes calldata _message\\n    ) internal pure returns (bytes calldata) {\\n        return bytes(_message[BODY_OFFSET:]);\\n    }\\n}\\n\",\"keccak256\":\"0x5319af5ade07bcb021d6373f0713f24f34431def78cda16fea6755f580fb5e78\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/libs/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\nlibrary TypeCasts {\\n    // alignment preserving cast\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    // alignment preserving cast\\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n        require(\\n            uint256(_buf) <= uint256(type(uint160).max),\\n            \\\"TypeCasts: bytes32ToAddress overflow\\\"\\n        );\\n        return address(uint160(uint256(_buf)));\\n    }\\n}\\n\",\"keccak256\":\"0xa4329f368c22062ccc725593c5c552796ce923cf66191cb9681f4f17fea8631f\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/token/HypERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {TokenRouter} from \\\"./libs/TokenRouter.sol\\\";\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title Hyperlane ERC20 Token Router that extends ERC20 with remote transfer functionality.\\n * @author Abacus Works\\n * @dev Supply on each chain is not constant but the aggregate supply across all chains is.\\n */\\ncontract HypERC20 is ERC20Upgradeable, TokenRouter {\\n    uint8 private immutable _decimals;\\n\\n    constructor(uint8 __decimals, address _mailbox) TokenRouter(_mailbox) {\\n        _decimals = __decimals;\\n    }\\n\\n    /**\\n     * @notice Initializes the Hyperlane router, ERC20 metadata, and mints initial supply to deployer.\\n     * @param _totalSupply The initial supply of the token.\\n     * @param _name The name of the token.\\n     * @param _symbol The symbol of the token.\\n     */\\n    function initialize(\\n        uint256 _totalSupply,\\n        string memory _name,\\n        string memory _symbol,\\n        address _hook,\\n        address _interchainSecurityModule,\\n        address _owner\\n    ) external initializer {\\n        // Initialize ERC20 metadata\\n        __ERC20_init(_name, _symbol);\\n        _mint(msg.sender, _totalSupply);\\n        _MailboxClient_initialize(_hook, _interchainSecurityModule, _owner);\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function balanceOf(\\n        address _account\\n    )\\n        public\\n        view\\n        virtual\\n        override(TokenRouter, ERC20Upgradeable)\\n        returns (uint256)\\n    {\\n        return ERC20Upgradeable.balanceOf(_account);\\n    }\\n\\n    /**\\n     * @dev Burns `_amount` of token from `msg.sender` balance.\\n     * @inheritdoc TokenRouter\\n     */\\n    function _transferFromSender(\\n        uint256 _amount\\n    ) internal override returns (bytes memory) {\\n        _burn(msg.sender, _amount);\\n        return bytes(\\\"\\\"); // no metadata\\n    }\\n\\n    /**\\n     * @dev Mints `_amount` of token to `_recipient` balance.\\n     * @inheritdoc TokenRouter\\n     */\\n    function _transferTo(\\n        address _recipient,\\n        uint256 _amount,\\n        bytes calldata // no metadata\\n    ) internal virtual override {\\n        _mint(_recipient, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xdadc1ae9eb4b16b94d053486ee57ba1fed3d1aa03928f7250884b8c18b878cd0\",\"license\":\"Apache-2.0\"},\"@hyperlane-xyz/core/contracts/token/libs/TokenMessage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nlibrary TokenMessage {\\n    function format(\\n        bytes32 _recipient,\\n        uint256 _amount,\\n        bytes memory _metadata\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_recipient, _amount, _metadata);\\n    }\\n\\n    function recipient(bytes calldata message) internal pure returns (bytes32) {\\n        return bytes32(message[0:32]);\\n    }\\n\\n    function amount(bytes calldata message) internal pure returns (uint256) {\\n        return uint256(bytes32(message[32:64]));\\n    }\\n\\n    // alias for ERC721\\n    function tokenId(bytes calldata message) internal pure returns (uint256) {\\n        return amount(message);\\n    }\\n\\n    function metadata(\\n        bytes calldata message\\n    ) internal pure returns (bytes calldata) {\\n        return message[64:];\\n    }\\n}\\n\",\"keccak256\":\"0x0bd8b076985c44231f6675f3bc968db8f8bd471af6ed919fb06a8f5d3bc8be0a\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/token/libs/TokenRouter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {IPostDispatchHook} from \\\"../../interfaces/hooks/IPostDispatchHook.sol\\\";\\nimport {GasRouter} from \\\"../../client/GasRouter.sol\\\";\\nimport {MailboxClient} from \\\"../../client/MailboxClient.sol\\\";\\nimport {TypeCasts} from \\\"../../libs/TypeCasts.sol\\\";\\nimport {TokenMessage} from \\\"./TokenMessage.sol\\\";\\n\\n/**\\n * @title Hyperlane Token Router that extends Router with abstract token (ERC20/ERC721) remote transfer functionality.\\n * @author Abacus Works\\n */\\nabstract contract TokenRouter is GasRouter {\\n    using TypeCasts for bytes32;\\n    using TypeCasts for address;\\n    using TokenMessage for bytes;\\n\\n    /**\\n     * @dev Emitted on `transferRemote` when a transfer message is dispatched.\\n     * @param destination The identifier of the destination chain.\\n     * @param recipient The address of the recipient on the destination chain.\\n     * @param amount The amount of tokens burnt on the origin chain.\\n     */\\n    event SentTransferRemote(\\n        uint32 indexed destination,\\n        bytes32 indexed recipient,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on `_handle` when a transfer message is processed.\\n     * @param origin The identifier of the origin chain.\\n     * @param recipient The address of the recipient on the destination chain.\\n     * @param amount The amount of tokens minted on the destination chain.\\n     */\\n    event ReceivedTransferRemote(\\n        uint32 indexed origin,\\n        bytes32 indexed recipient,\\n        uint256 amount\\n    );\\n\\n    constructor(address _mailbox) GasRouter(_mailbox) {}\\n\\n    /**\\n     * @notice Transfers `_amountOrId` token to `_recipient` on `_destination` domain.\\n     * @dev Delegates transfer logic to `_transferFromSender` implementation.\\n     * @dev Emits `SentTransferRemote` event on the origin chain.\\n     * @param _destination The identifier of the destination chain.\\n     * @param _recipient The address of the recipient on the destination chain.\\n     * @param _amountOrId The amount or identifier of tokens to be sent to the remote recipient.\\n     * @return messageId The identifier of the dispatched message.\\n     */\\n    function transferRemote(\\n        uint32 _destination,\\n        bytes32 _recipient,\\n        uint256 _amountOrId\\n    ) external payable virtual returns (bytes32 messageId) {\\n        return\\n            _transferRemote(_destination, _recipient, _amountOrId, msg.value);\\n    }\\n\\n    /**\\n     * @notice Transfers `_amountOrId` token to `_recipient` on `_destination` domain with a specified hook\\n     * @dev Delegates transfer logic to `_transferFromSender` implementation.\\n     * @dev The metadata is the token metadata, and is DIFFERENT than the hook metadata.\\n     * @dev Emits `SentTransferRemote` event on the origin chain.\\n     * @param _destination The identifier of the destination chain.\\n     * @param _recipient The address of the recipient on the destination chain.\\n     * @param _amountOrId The amount or identifier of tokens to be sent to the remote recipient.\\n     * @param _hookMetadata The metadata passed into the hook\\n     * @param _hook The post dispatch hook to be called by the Mailbox\\n     * @return messageId The identifier of the dispatched message.\\n     */\\n    function transferRemote(\\n        uint32 _destination,\\n        bytes32 _recipient,\\n        uint256 _amountOrId,\\n        bytes calldata _hookMetadata,\\n        address _hook\\n    ) external payable virtual returns (bytes32 messageId) {\\n        return\\n            _transferRemote(\\n                _destination,\\n                _recipient,\\n                _amountOrId,\\n                msg.value,\\n                _hookMetadata,\\n                _hook\\n            );\\n    }\\n\\n    function _transferRemote(\\n        uint32 _destination,\\n        bytes32 _recipient,\\n        uint256 _amountOrId,\\n        uint256 _value\\n    ) internal returns (bytes32 messageId) {\\n        return\\n            _transferRemote(\\n                _destination,\\n                _recipient,\\n                _amountOrId,\\n                _value,\\n                _GasRouter_hookMetadata(_destination),\\n                address(hook)\\n            );\\n    }\\n\\n    function _transferRemote(\\n        uint32 _destination,\\n        bytes32 _recipient,\\n        uint256 _amountOrId,\\n        uint256 _value,\\n        bytes memory _hookMetadata,\\n        address _hook\\n    ) internal virtual returns (bytes32 messageId) {\\n        bytes memory _tokenMetadata = _transferFromSender(_amountOrId);\\n        bytes memory _tokenMessage = TokenMessage.format(\\n            _recipient,\\n            _amountOrId,\\n            _tokenMetadata\\n        );\\n\\n        messageId = _Router_dispatch(\\n            _destination,\\n            _value,\\n            _tokenMessage,\\n            _hookMetadata,\\n            _hook\\n        );\\n\\n        emit SentTransferRemote(_destination, _recipient, _amountOrId);\\n    }\\n\\n    /**\\n     * @dev Should transfer `_amountOrId` of tokens from `msg.sender` to this token router.\\n     * @dev Called by `transferRemote` before message dispatch.\\n     * @dev Optionally returns `metadata` associated with the transfer to be passed in message.\\n     */\\n    function _transferFromSender(\\n        uint256 _amountOrId\\n    ) internal virtual returns (bytes memory metadata);\\n\\n    /**\\n     * @notice Returns the balance of `account` on this token router.\\n     * @param account The address to query the balance of.\\n     * @return The balance of `account`.\\n     */\\n    function balanceOf(address account) external virtual returns (uint256);\\n\\n    /**\\n     * @dev Mints tokens to recipient when router receives transfer message.\\n     * @dev Emits `ReceivedTransferRemote` event on the destination chain.\\n     * @param _origin The identifier of the origin chain.\\n     * @param _message The encoded remote transfer message containing the recipient address and amount.\\n     */\\n    function _handle(\\n        uint32 _origin,\\n        bytes32,\\n        bytes calldata _message\\n    ) internal virtual override {\\n        bytes32 recipient = _message.recipient();\\n        uint256 amount = _message.amount();\\n        bytes calldata metadata = _message.metadata();\\n        _transferTo(recipient.bytes32ToAddress(), amount, metadata);\\n        emit ReceivedTransferRemote(_origin, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Should transfer `_amountOrId` of tokens from this token router to `_recipient`.\\n     * @dev Called by `handle` after message decoding.\\n     * @dev Optionally handles `metadata` associated with transfer passed in message.\\n     */\\n    function _transferTo(\\n        address _recipient,\\n        uint256 _amountOrId,\\n        bytes calldata metadata\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x26aff45ac4b0a29f965dcc98d341aa6c27957d8b858e94c00480dc1cd05a8ae0\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xa9311aeb22f459e57d4dac77ee76cf43fb28ad3215278456211b5852b0e9e970\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x7ebfe2422bc571599c2ec20577d7848e1e7a0acf85fa7c2d9636618bbbdf6fca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/MyCustomHypERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport { HypERC20 } from \\\"@hyperlane-xyz/core/contracts/token/HypERC20.sol\\\";\\n\\ncontract MyCustomHypERC20 is HypERC20 {\\n    constructor(uint8 _decimals, address _mailbox) HypERC20(_decimals, _mailbox) {}\\n\\n    function mint(address to, uint256 amount) external {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xceaa92252f9de36b7bbc62b3cb667fa7ffe034c801075c7bfc7ff0bc849aec7e\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162002f1938038062002f19833981016040819052620000349162000185565b818180808080806001600160a01b0381163b620000975760405162461bcd60e51b815260206004820152601e60248201527f4d61696c626f78436c69656e743a20696e76616c6964206d61696c626f780000604482015260640160405180910390fd5b6001600160a01b03821660808190526040805163234d8e3d60e21b81529051638d3638f4916004808201926020929091908290030181865afa158015620000e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001089190620001d4565b63ffffffff1660a0526200011c3362000133565b50505060ff90931660c05250620002039350505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080604083850312156200019957600080fd5b825160ff81168114620001ab57600080fd5b60208401519092506001600160a01b0381168114620001c957600080fd5b809150509250929050565b600060208284031215620001e757600080fd5b815163ffffffff81168114620001fc57600080fd5b9392505050565b60805160a05160c051612cd16200024860003960006103440152600061051501526000818161065a01528181610b0901528181611af80152611dcd0152612cd16000f3fe60806040526004361061024f5760003560e01c80637f5a7c7b11610138578063b49c53a7116100b0578063e80a7c791161007f578063efae508a11610064578063efae508a14610722578063f2ed8c5314610742578063f2fde38b1461076257600080fd5b8063e80a7c79146106e2578063e9198bf91461070257600080fd5b8063b49c53a714610628578063d5438eae14610648578063dd62ed3e1461067c578063de523cf3146106c257600080fd5b806393c4484711610107578063a457c2d7116100ec578063a457c2d7146105c8578063a9059cbb146105e8578063b1bd64361461060857600080fd5b806393c448471461056a57806395d89b41146105b357600080fd5b80637f5a7c7b146104b857806381b4e8b4146104f05780638d3638f4146105035780638da5cb5b1461054c57600080fd5b806340c10f19116101cb57806356d5d4751161019a578063715018a61161017f578063715018a61461045657806371a15b381461046b578063775313a11461048b57600080fd5b806356d5d4751461042357806370a082311461043657600080fd5b806340c10f19146103ae578063440df4f4146103ce57806349d462ef146103f057806351debffc1461041057600080fd5b806323b872dd11610222578063313ce56711610207578063313ce56714610330578063395093511461036e5780633dfd38731461038e57600080fd5b806323b872dd146102f05780632ead72f61461031057600080fd5b806306fdde0314610254578063095ea7b31461027f5780630e72cc06146102af57806318160ddd146102d1575b600080fd5b34801561026057600080fd5b50610269610782565b6040516102769190612425565b60405180910390f35b34801561028b57600080fd5b5061029f61029a366004612454565b610814565b6040519015158152602001610276565b3480156102bb57600080fd5b506102cf6102ca36600461247e565b61082e565b005b3480156102dd57600080fd5b506035545b604051908152602001610276565b3480156102fc57600080fd5b5061029f61030b366004612499565b61091a565b34801561031c57600080fd5b506102e261032b3660046124e9565b61093e565b34801561033c57600080fd5b5060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610276565b34801561037a57600080fd5b5061029f610389366004612454565b61095d565b34801561039a57600080fd5b506102cf6103a936600461247e565b61099c565b3480156103ba57600080fd5b506102cf6103c9366004612454565b610a7b565b3480156103da57600080fd5b506103e3610a89565b6040516102769190612504565b3480156103fc57600080fd5b506102cf61040b36600461254e565b610a9a565b6102e261041e3660046125ac565b610aac565b6102cf610431366004612623565b610afe565b34801561044257600080fd5b506102e261045136600461247e565b610c15565b34801561046257600080fd5b506102cf610c33565b34801561047757600080fd5b506102cf6104863660046126c2565b610c47565b34801561049757600080fd5b506102e26104a63660046124e9565b60fc6020526000908152604090205481565b3480156104c457600080fd5b506097546104d8906001600160a01b031681565b6040516001600160a01b039091168152602001610276565b6102e26104fe366004612704565b610ca2565b34801561050f57600080fd5b506105377f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610276565b34801561055857600080fd5b506065546001600160a01b03166104d8565b34801561057657600080fd5b506102696040518060400160405280600581526020017f352e382e3300000000000000000000000000000000000000000000000000000081525081565b3480156105bf57600080fd5b50610269610cb0565b3480156105d457600080fd5b5061029f6105e3366004612454565b610cbf565b3480156105f457600080fd5b5061029f610603366004612454565b610d69565b34801561061457600080fd5b506102cf610623366004612737565b610d77565b34801561063457600080fd5b506102cf61064336600461254e565b610ded565b34801561065457600080fd5b506104d87f000000000000000000000000000000000000000000000000000000000000000081565b34801561068857600080fd5b506102e26106973660046127ac565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b3480156106ce57600080fd5b506098546104d8906001600160a01b031681565b3480156106ee57600080fd5b506102cf6106fd366004612882565b610dff565b34801561070e57600080fd5b506102cf61071d366004612914565b610f3c565b34801561072e57600080fd5b506102cf61073d3660046124e9565b611001565b34801561074e57600080fd5b506102e261075d3660046124e9565b611015565b34801561076e57600080fd5b506102cf61077d36600461247e565b61103f565b60606036805461079190612974565b80601f01602080910402602001604051908101604052809291908181526020018280546107bd90612974565b801561080a5780601f106107df5761010080835404028352916020019161080a565b820191906000526020600020905b8154815290600101906020018083116107ed57829003601f168201915b5050505050905090565b6000336108228185856110cc565b60019150505b92915050565b806001600160a01b0381163b15158061084e57506001600160a01b038116155b6108af5760405162461bcd60e51b815260206004820152602760248201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060448201526673657474696e6760c81b60648201526084015b60405180910390fd5b6108b76111f0565b6098805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527fc47cbcc588c67679e52261c45cc315e56562f8d0ccaba16facb9093ff9498799906020015b60405180910390a15050565b60003361092885828561124a565b6109338585856112d6565b506001949350505050565b60008061095560c963ffffffff808616906114b016565b949350505050565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919061082290829086906109979087906129c4565b6110cc565b806001600160a01b0381163b1515806109bc57506001600160a01b038116155b610a185760405162461bcd60e51b815260206004820152602760248201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060448201526673657474696e6760c81b60648201526084016108a6565b610a206111f0565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527f4eab7b127c764308788622363ad3e9532de3dfba7845bd4f84c125a22544255a9060200161090e565b610a8582826114c9565b5050565b6060610a9560c961158a565b905090565b610aa26111f0565b610a85828261163b565b6000610af38787873488888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250611689915050565b979650505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b805760405162461bcd60e51b815260206004820152602160248201527f4d61696c626f78436c69656e743a2073656e646572206e6f74206d61696c626f6044820152600f60fb1b60648201526084016108a6565b6000610b8b85611702565b9050838114610c025760405162461bcd60e51b815260206004820152602560248201527f456e726f6c6c656420726f7574657220646f6573206e6f74206d61746368207360448201527f656e64657200000000000000000000000000000000000000000000000000000060648201526084016108a6565b610c0e8585858561174d565b5050505050565b6001600160a01b038116600090815260336020526040812054610828565b610c3b6111f0565b610c4560006117d9565b565b610c4f6111f0565b8060005b81811015610c9c57610c8a848483818110610c7057610c706129d7565b9050602002016020810190610c8591906124e9565b611838565b610c956001826129c4565b9050610c53565b50505050565b600061095584848434611873565b60606037805461079190612974565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919083811015610d5c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016108a6565b61093382868684036110cc565b6000336108228185856112d6565b610d7f6111f0565b60005b81811015610de857610dd6838383818110610d9f57610d9f6129d7565b610db592602060409092020190810191506124e9565b848484818110610dc757610dc76129d7565b9050604002016020013561163b565b610de16001826129c4565b9050610d82565b505050565b610df56111f0565b610a85828261189f565b600054610100900460ff1615808015610e1f5750600054600160ff909116105b80610e395750303b158015610e39575060005460ff166001145b610eab5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108a6565b6000805460ff191660011790558015610ece576000805461ff0019166101001790555b610ed886866118b5565b610ee233886114c9565b610eed84848461192a565b8015610f33576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b610f446111f0565b828114610f935760405162461bcd60e51b815260206004820152600760248201527f216c656e6774680000000000000000000000000000000000000000000000000060448201526064016108a6565b8260005b81811015610ff957610fe7868683818110610fb457610fb46129d7565b9050602002016020810190610fc991906124e9565b858584818110610fdb57610fdb6129d7565b9050602002013561189f565b610ff26001826129c4565b9050610f97565b505050505050565b6110096111f0565b61101281611838565b50565b604080516020810190915260008082526097549091610828918491906001600160a01b03166119b8565b6110476111f0565b6001600160a01b0381166110c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108a6565b611012816117d9565b6001600160a01b03831661112e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016108a6565b6001600160a01b03821661118f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016108a6565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6065546001600160a01b03163314610c455760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a6565b6001600160a01b038381166000908152603460209081526040808320938616835292905220546000198114610c9c57818110156112c95760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016108a6565b610c9c84848484036110cc565b6001600160a01b0383166113525760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016108a6565b6001600160a01b0382166113b45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016108a6565b6001600160a01b038316600090815260336020526040902054818110156114435760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016108a6565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906114a39086815260200190565b60405180910390a3610c9c565b6000806114bd84846119ce565b915091505b9250929050565b6001600160a01b03821661151f5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016108a6565b806035600082825461153191906129c4565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6060600061159783611a08565b9050805167ffffffffffffffff8111156115b3576115b36127df565b6040519080825280602002602001820160405280156115dc578160200160208202803683370190505b50915060005b8151811015611634578181815181106115fd576115fd6129d7565b6020026020010151838281518110611617576116176129d7565b63ffffffff909216602092830291909101909101526001016115e2565b5050919050565b63ffffffff8216600081815260fc6020908152604091829020849055815192835282018390527fc3de732a98b24a2b5c6f67e8a7fb057ffc14046b83968a2c73e4148d2fba978b910161090e565b60008061169586611a99565b905060006116a4888884611ab9565b90506116b38987838888611ae8565b9250878963ffffffff167fd229aacb94204188fe8042965fa6b269c62dc5818b21238779ab64bdd17efeec896040516116ee91815260200190565b60405180910390a350509695505050505050565b6000808061171a60c963ffffffff808716906114b016565b91509150811561172b579392505050565b61173484611b8e565b60405162461bcd60e51b81526004016108a69190612425565b60006117598383611bc5565b905060006117678484611be4565b90503660006117768686611bf4565b9150915061178e61178685611c04565b848484611c6d565b838863ffffffff167fba20947a325f450d232530e5f5fce293e7963499d5309a07cee84a269f2f15a6856040516117c791815260200190565b60405180910390a35050505050505050565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61184c60c963ffffffff80841690611c7716565b61185582611b8e565b90610a855760405162461bcd60e51b81526004016108a69190612425565b6000611896858585856118858a611c83565b6097546001600160a01b0316611689565b95945050505050565b610a8560c963ffffffff808516908490611ca516565b600054610100900460ff166119205760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108a6565b610a858282611cb0565b600054610100900460ff166119955760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108a6565b61199d611d34565b6119a68361099c565b6119af8261082e565b610de8816117d9565b600061095584846119c887611c83565b85611da7565b60008181526002830160205260408120548190806119fd576119f08585611e55565b9250600091506114c29050565b6001925090506114c2565b60606000611a1583611e61565b90508067ffffffffffffffff811115611a3057611a306127df565b604051908082528060200260200182016040528015611a59578160200160208202803683370190505b50915060005b8181101561163457611a718482611e6c565b60001c838281518110611a8657611a866129d7565b6020908102919091010152600101611a5f565b6060611aa53383611e78565b505060408051602081019091526000815290565b6060838383604051602001611ad0939291906129ed565b60405160208183030381529060405290509392505050565b600080611af487611702565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310b83dc08789848989896040518763ffffffff1660e01b8152600401611b4b959493929190612a1a565b60206040518083038185885af1158015611b69573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610af39190612a6d565b6060611b9f8263ffffffff16611fac565b604051602001611baf9190612a86565b6040516020818303038152906040529050919050565b6000611bd46020828486612acb565b611bdd91612af5565b9392505050565b6000611bd4604060208486612acb565b3660006114bd8360408187612acb565b60006001600160a01b03821115611c695760405162461bcd60e51b8152602060048201526024808201527f5479706543617374733a2062797465733332546f41646472657373206f766572604482015263666c6f7760e01b60648201526084016108a6565b5090565b610c9c84846114c9565b6000611bdd838361204c565b63ffffffff8116600090815260fc602052604090205460609061082890612069565b610c9c838383612087565b600054610100900460ff16611d1b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108a6565b6036611d278382612b5b565b506037610de88282612b5b565b600054610100900460ff16611d9f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108a6565b610c456120a4565b600080611db386611702565b6040516381d2ea9560e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906381d2ea9590611e0a90899085908a908a908a90600401612a1a565b602060405180830381865afa158015611e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4b9190612a6d565b9695505050505050565b6000611bdd8383612118565b600061082882612130565b6000611bdd838361213a565b6001600160a01b038216611ed85760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016108a6565b6001600160a01b03821660009081526033602052604090205481811015611f4c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016108a6565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b60606000611fb983612164565b600101905060008167ffffffffffffffff811115611fd957611fd96127df565b6040519080825280601f01601f191660200182016040528015612003576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461200d57509392505050565b60008181526002830160205260408120819055611bdd8383612246565b60606108286000833360405180602001604052806000815250612252565b600082815260028401602052604081208290556109558484612287565b600054610100900460ff1661210f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108a6565b610c45336117d9565b60008181526001830160205260408120541515611bdd565b6000610828825490565b6000826000018281548110612151576121516129d7565b9060005260206000200154905092915050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106121ad577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106121d9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106121f757662386f26fc10000830492506010015b6305f5e100831061220f576305f5e100830492506008015b612710831061222357612710830492506004015b60648310612235576064830492506002015b600a83106108285760010192915050565b6000611bdd8383612293565b606060018585858560405160200161226e959493929190612c1b565b6040516020818303038152906040529050949350505050565b6000611bdd8383612386565b6000818152600183016020526040812054801561237c5760006122b7600183612c72565b85549091506000906122cb90600190612c72565b90508181146123305760008660000182815481106122eb576122eb6129d7565b906000526020600020015490508087600001848154811061230e5761230e6129d7565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061234157612341612c85565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610828565b6000915050610828565b60008181526001830160205260408120546123cd57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610828565b506000610828565b60005b838110156123f05781810151838201526020016123d8565b50506000910152565b600081518084526124118160208601602086016123d5565b601f01601f19169290920160200192915050565b602081526000611bdd60208301846123f9565b80356001600160a01b038116811461244f57600080fd5b919050565b6000806040838503121561246757600080fd5b61247083612438565b946020939093013593505050565b60006020828403121561249057600080fd5b611bdd82612438565b6000806000606084860312156124ae57600080fd5b6124b784612438565b92506124c560208501612438565b9150604084013590509250925092565b803563ffffffff8116811461244f57600080fd5b6000602082840312156124fb57600080fd5b611bdd826124d5565b6020808252825182820181905260009190848201906040850190845b8181101561254257835163ffffffff1683529284019291840191600101612520565b50909695505050505050565b6000806040838503121561256157600080fd5b612470836124d5565b60008083601f84011261257c57600080fd5b50813567ffffffffffffffff81111561259457600080fd5b6020830191508360208285010111156114c257600080fd5b60008060008060008060a087890312156125c557600080fd5b6125ce876124d5565b95506020870135945060408701359350606087013567ffffffffffffffff8111156125f857600080fd5b61260489828a0161256a565b9094509250612617905060808801612438565b90509295509295509295565b6000806000806060858703121561263957600080fd5b612642856124d5565b935060208501359250604085013567ffffffffffffffff81111561266557600080fd5b6126718782880161256a565b95989497509550505050565b60008083601f84011261268f57600080fd5b50813567ffffffffffffffff8111156126a757600080fd5b6020830191508360208260051b85010111156114c257600080fd5b600080602083850312156126d557600080fd5b823567ffffffffffffffff8111156126ec57600080fd5b6126f88582860161267d565b90969095509350505050565b60008060006060848603121561271957600080fd5b612722846124d5565b95602085013595506040909401359392505050565b6000806020838503121561274a57600080fd5b823567ffffffffffffffff8082111561276257600080fd5b818501915085601f83011261277657600080fd5b81358181111561278557600080fd5b8660208260061b850101111561279a57600080fd5b60209290920196919550909350505050565b600080604083850312156127bf57600080fd5b6127c883612438565b91506127d660208401612438565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261280657600080fd5b813567ffffffffffffffff80821115612821576128216127df565b604051601f8301601f19908116603f01168101908282118183101715612849576128496127df565b8160405283815286602085880101111561286257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c0878903121561289b57600080fd5b86359550602087013567ffffffffffffffff808211156128ba57600080fd5b6128c68a838b016127f5565b965060408901359150808211156128dc57600080fd5b506128e989828a016127f5565b9450506128f860608801612438565b925061290660808801612438565b915061261760a08801612438565b6000806000806040858703121561292a57600080fd5b843567ffffffffffffffff8082111561294257600080fd5b61294e8883890161267d565b9096509450602087013591508082111561296757600080fd5b506126718782880161267d565b600181811c9082168061298857607f821691505b6020821081036129a857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610828576108286129ae565b634e487b7160e01b600052603260045260246000fd5b83815282602082015260008251612a0b8160408501602087016123d5565b91909101604001949350505050565b63ffffffff8616815284602082015260a060408201526000612a3f60a08301866123f9565b8281036060840152612a5181866123f9565b9150506001600160a01b03831660808301529695505050505050565b600060208284031215612a7f57600080fd5b5051919050565b7f4e6f20726f7574657220656e726f6c6c656420666f7220646f6d61696e3a2000815260008251612abe81601f8501602087016123d5565b91909101601f0192915050565b60008085851115612adb57600080fd5b83861115612ae857600080fd5b5050820193919092039150565b8035602083101561082857600019602084900360031b1b1692915050565b601f821115610de8576000816000526020600020601f850160051c81016020861015612b3c5750805b601f850160051c820191505b81811015610ff957828155600101612b48565b815167ffffffffffffffff811115612b7557612b756127df565b612b8981612b838454612974565b84612b13565b602080601f831160018114612bbe5760008415612ba65750858301515b600019600386901b1c1916600185901b178555610ff9565b600085815260208120601f198616915b82811015612bed57888601518255948401946001909101908401612bce565b5085821015612c0b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61ffff60f01b8660f01b1681528460028201528360228201526bffffffffffffffffffffffff198360601b16604282015260008251612c618160568501602087016123d5565b919091016056019695505050505050565b81810381811115610828576108286129ae565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220b0a80ba6288d999c6dbcb80a0a9e10c61ee64771b5a2c9c7e1f35573c9af0cf564736f6c63430008170033",
  "deployedBytecode": "0x60806040526004361061024f5760003560e01c80637f5a7c7b11610138578063b49c53a7116100b0578063e80a7c791161007f578063efae508a11610064578063efae508a14610722578063f2ed8c5314610742578063f2fde38b1461076257600080fd5b8063e80a7c79146106e2578063e9198bf91461070257600080fd5b8063b49c53a714610628578063d5438eae14610648578063dd62ed3e1461067c578063de523cf3146106c257600080fd5b806393c4484711610107578063a457c2d7116100ec578063a457c2d7146105c8578063a9059cbb146105e8578063b1bd64361461060857600080fd5b806393c448471461056a57806395d89b41146105b357600080fd5b80637f5a7c7b146104b857806381b4e8b4146104f05780638d3638f4146105035780638da5cb5b1461054c57600080fd5b806340c10f19116101cb57806356d5d4751161019a578063715018a61161017f578063715018a61461045657806371a15b381461046b578063775313a11461048b57600080fd5b806356d5d4751461042357806370a082311461043657600080fd5b806340c10f19146103ae578063440df4f4146103ce57806349d462ef146103f057806351debffc1461041057600080fd5b806323b872dd11610222578063313ce56711610207578063313ce56714610330578063395093511461036e5780633dfd38731461038e57600080fd5b806323b872dd146102f05780632ead72f61461031057600080fd5b806306fdde0314610254578063095ea7b31461027f5780630e72cc06146102af57806318160ddd146102d1575b600080fd5b34801561026057600080fd5b50610269610782565b6040516102769190612425565b60405180910390f35b34801561028b57600080fd5b5061029f61029a366004612454565b610814565b6040519015158152602001610276565b3480156102bb57600080fd5b506102cf6102ca36600461247e565b61082e565b005b3480156102dd57600080fd5b506035545b604051908152602001610276565b3480156102fc57600080fd5b5061029f61030b366004612499565b61091a565b34801561031c57600080fd5b506102e261032b3660046124e9565b61093e565b34801561033c57600080fd5b5060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610276565b34801561037a57600080fd5b5061029f610389366004612454565b61095d565b34801561039a57600080fd5b506102cf6103a936600461247e565b61099c565b3480156103ba57600080fd5b506102cf6103c9366004612454565b610a7b565b3480156103da57600080fd5b506103e3610a89565b6040516102769190612504565b3480156103fc57600080fd5b506102cf61040b36600461254e565b610a9a565b6102e261041e3660046125ac565b610aac565b6102cf610431366004612623565b610afe565b34801561044257600080fd5b506102e261045136600461247e565b610c15565b34801561046257600080fd5b506102cf610c33565b34801561047757600080fd5b506102cf6104863660046126c2565b610c47565b34801561049757600080fd5b506102e26104a63660046124e9565b60fc6020526000908152604090205481565b3480156104c457600080fd5b506097546104d8906001600160a01b031681565b6040516001600160a01b039091168152602001610276565b6102e26104fe366004612704565b610ca2565b34801561050f57600080fd5b506105377f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610276565b34801561055857600080fd5b506065546001600160a01b03166104d8565b34801561057657600080fd5b506102696040518060400160405280600581526020017f352e382e3300000000000000000000000000000000000000000000000000000081525081565b3480156105bf57600080fd5b50610269610cb0565b3480156105d457600080fd5b5061029f6105e3366004612454565b610cbf565b3480156105f457600080fd5b5061029f610603366004612454565b610d69565b34801561061457600080fd5b506102cf610623366004612737565b610d77565b34801561063457600080fd5b506102cf61064336600461254e565b610ded565b34801561065457600080fd5b506104d87f000000000000000000000000000000000000000000000000000000000000000081565b34801561068857600080fd5b506102e26106973660046127ac565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b3480156106ce57600080fd5b506098546104d8906001600160a01b031681565b3480156106ee57600080fd5b506102cf6106fd366004612882565b610dff565b34801561070e57600080fd5b506102cf61071d366004612914565b610f3c565b34801561072e57600080fd5b506102cf61073d3660046124e9565b611001565b34801561074e57600080fd5b506102e261075d3660046124e9565b611015565b34801561076e57600080fd5b506102cf61077d36600461247e565b61103f565b60606036805461079190612974565b80601f01602080910402602001604051908101604052809291908181526020018280546107bd90612974565b801561080a5780601f106107df5761010080835404028352916020019161080a565b820191906000526020600020905b8154815290600101906020018083116107ed57829003601f168201915b5050505050905090565b6000336108228185856110cc565b60019150505b92915050565b806001600160a01b0381163b15158061084e57506001600160a01b038116155b6108af5760405162461bcd60e51b815260206004820152602760248201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060448201526673657474696e6760c81b60648201526084015b60405180910390fd5b6108b76111f0565b6098805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527fc47cbcc588c67679e52261c45cc315e56562f8d0ccaba16facb9093ff9498799906020015b60405180910390a15050565b60003361092885828561124a565b6109338585856112d6565b506001949350505050565b60008061095560c963ffffffff808616906114b016565b949350505050565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919061082290829086906109979087906129c4565b6110cc565b806001600160a01b0381163b1515806109bc57506001600160a01b038116155b610a185760405162461bcd60e51b815260206004820152602760248201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060448201526673657474696e6760c81b60648201526084016108a6565b610a206111f0565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527f4eab7b127c764308788622363ad3e9532de3dfba7845bd4f84c125a22544255a9060200161090e565b610a8582826114c9565b5050565b6060610a9560c961158a565b905090565b610aa26111f0565b610a85828261163b565b6000610af38787873488888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250611689915050565b979650505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b805760405162461bcd60e51b815260206004820152602160248201527f4d61696c626f78436c69656e743a2073656e646572206e6f74206d61696c626f6044820152600f60fb1b60648201526084016108a6565b6000610b8b85611702565b9050838114610c025760405162461bcd60e51b815260206004820152602560248201527f456e726f6c6c656420726f7574657220646f6573206e6f74206d61746368207360448201527f656e64657200000000000000000000000000000000000000000000000000000060648201526084016108a6565b610c0e8585858561174d565b5050505050565b6001600160a01b038116600090815260336020526040812054610828565b610c3b6111f0565b610c4560006117d9565b565b610c4f6111f0565b8060005b81811015610c9c57610c8a848483818110610c7057610c706129d7565b9050602002016020810190610c8591906124e9565b611838565b610c956001826129c4565b9050610c53565b50505050565b600061095584848434611873565b60606037805461079190612974565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919083811015610d5c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016108a6565b61093382868684036110cc565b6000336108228185856112d6565b610d7f6111f0565b60005b81811015610de857610dd6838383818110610d9f57610d9f6129d7565b610db592602060409092020190810191506124e9565b848484818110610dc757610dc76129d7565b9050604002016020013561163b565b610de16001826129c4565b9050610d82565b505050565b610df56111f0565b610a85828261189f565b600054610100900460ff1615808015610e1f5750600054600160ff909116105b80610e395750303b158015610e39575060005460ff166001145b610eab5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108a6565b6000805460ff191660011790558015610ece576000805461ff0019166101001790555b610ed886866118b5565b610ee233886114c9565b610eed84848461192a565b8015610f33576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b610f446111f0565b828114610f935760405162461bcd60e51b815260206004820152600760248201527f216c656e6774680000000000000000000000000000000000000000000000000060448201526064016108a6565b8260005b81811015610ff957610fe7868683818110610fb457610fb46129d7565b9050602002016020810190610fc991906124e9565b858584818110610fdb57610fdb6129d7565b9050602002013561189f565b610ff26001826129c4565b9050610f97565b505050505050565b6110096111f0565b61101281611838565b50565b604080516020810190915260008082526097549091610828918491906001600160a01b03166119b8565b6110476111f0565b6001600160a01b0381166110c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108a6565b611012816117d9565b6001600160a01b03831661112e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016108a6565b6001600160a01b03821661118f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016108a6565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6065546001600160a01b03163314610c455760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a6565b6001600160a01b038381166000908152603460209081526040808320938616835292905220546000198114610c9c57818110156112c95760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016108a6565b610c9c84848484036110cc565b6001600160a01b0383166113525760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016108a6565b6001600160a01b0382166113b45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016108a6565b6001600160a01b038316600090815260336020526040902054818110156114435760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016108a6565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906114a39086815260200190565b60405180910390a3610c9c565b6000806114bd84846119ce565b915091505b9250929050565b6001600160a01b03821661151f5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016108a6565b806035600082825461153191906129c4565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6060600061159783611a08565b9050805167ffffffffffffffff8111156115b3576115b36127df565b6040519080825280602002602001820160405280156115dc578160200160208202803683370190505b50915060005b8151811015611634578181815181106115fd576115fd6129d7565b6020026020010151838281518110611617576116176129d7565b63ffffffff909216602092830291909101909101526001016115e2565b5050919050565b63ffffffff8216600081815260fc6020908152604091829020849055815192835282018390527fc3de732a98b24a2b5c6f67e8a7fb057ffc14046b83968a2c73e4148d2fba978b910161090e565b60008061169586611a99565b905060006116a4888884611ab9565b90506116b38987838888611ae8565b9250878963ffffffff167fd229aacb94204188fe8042965fa6b269c62dc5818b21238779ab64bdd17efeec896040516116ee91815260200190565b60405180910390a350509695505050505050565b6000808061171a60c963ffffffff808716906114b016565b91509150811561172b579392505050565b61173484611b8e565b60405162461bcd60e51b81526004016108a69190612425565b60006117598383611bc5565b905060006117678484611be4565b90503660006117768686611bf4565b9150915061178e61178685611c04565b848484611c6d565b838863ffffffff167fba20947a325f450d232530e5f5fce293e7963499d5309a07cee84a269f2f15a6856040516117c791815260200190565b60405180910390a35050505050505050565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61184c60c963ffffffff80841690611c7716565b61185582611b8e565b90610a855760405162461bcd60e51b81526004016108a69190612425565b6000611896858585856118858a611c83565b6097546001600160a01b0316611689565b95945050505050565b610a8560c963ffffffff808516908490611ca516565b600054610100900460ff166119205760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108a6565b610a858282611cb0565b600054610100900460ff166119955760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108a6565b61199d611d34565b6119a68361099c565b6119af8261082e565b610de8816117d9565b600061095584846119c887611c83565b85611da7565b60008181526002830160205260408120548190806119fd576119f08585611e55565b9250600091506114c29050565b6001925090506114c2565b60606000611a1583611e61565b90508067ffffffffffffffff811115611a3057611a306127df565b604051908082528060200260200182016040528015611a59578160200160208202803683370190505b50915060005b8181101561163457611a718482611e6c565b60001c838281518110611a8657611a866129d7565b6020908102919091010152600101611a5f565b6060611aa53383611e78565b505060408051602081019091526000815290565b6060838383604051602001611ad0939291906129ed565b60405160208183030381529060405290509392505050565b600080611af487611702565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310b83dc08789848989896040518763ffffffff1660e01b8152600401611b4b959493929190612a1a565b60206040518083038185885af1158015611b69573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610af39190612a6d565b6060611b9f8263ffffffff16611fac565b604051602001611baf9190612a86565b6040516020818303038152906040529050919050565b6000611bd46020828486612acb565b611bdd91612af5565b9392505050565b6000611bd4604060208486612acb565b3660006114bd8360408187612acb565b60006001600160a01b03821115611c695760405162461bcd60e51b8152602060048201526024808201527f5479706543617374733a2062797465733332546f41646472657373206f766572604482015263666c6f7760e01b60648201526084016108a6565b5090565b610c9c84846114c9565b6000611bdd838361204c565b63ffffffff8116600090815260fc602052604090205460609061082890612069565b610c9c838383612087565b600054610100900460ff16611d1b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108a6565b6036611d278382612b5b565b506037610de88282612b5b565b600054610100900460ff16611d9f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108a6565b610c456120a4565b600080611db386611702565b6040516381d2ea9560e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906381d2ea9590611e0a90899085908a908a908a90600401612a1a565b602060405180830381865afa158015611e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4b9190612a6d565b9695505050505050565b6000611bdd8383612118565b600061082882612130565b6000611bdd838361213a565b6001600160a01b038216611ed85760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016108a6565b6001600160a01b03821660009081526033602052604090205481811015611f4c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016108a6565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b60606000611fb983612164565b600101905060008167ffffffffffffffff811115611fd957611fd96127df565b6040519080825280601f01601f191660200182016040528015612003576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461200d57509392505050565b60008181526002830160205260408120819055611bdd8383612246565b60606108286000833360405180602001604052806000815250612252565b600082815260028401602052604081208290556109558484612287565b600054610100900460ff1661210f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108a6565b610c45336117d9565b60008181526001830160205260408120541515611bdd565b6000610828825490565b6000826000018281548110612151576121516129d7565b9060005260206000200154905092915050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106121ad577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106121d9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106121f757662386f26fc10000830492506010015b6305f5e100831061220f576305f5e100830492506008015b612710831061222357612710830492506004015b60648310612235576064830492506002015b600a83106108285760010192915050565b6000611bdd8383612293565b606060018585858560405160200161226e959493929190612c1b565b6040516020818303038152906040529050949350505050565b6000611bdd8383612386565b6000818152600183016020526040812054801561237c5760006122b7600183612c72565b85549091506000906122cb90600190612c72565b90508181146123305760008660000182815481106122eb576122eb6129d7565b906000526020600020015490508087600001848154811061230e5761230e6129d7565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061234157612341612c85565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610828565b6000915050610828565b60008181526001830160205260408120546123cd57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610828565b506000610828565b60005b838110156123f05781810151838201526020016123d8565b50506000910152565b600081518084526124118160208601602086016123d5565b601f01601f19169290920160200192915050565b602081526000611bdd60208301846123f9565b80356001600160a01b038116811461244f57600080fd5b919050565b6000806040838503121561246757600080fd5b61247083612438565b946020939093013593505050565b60006020828403121561249057600080fd5b611bdd82612438565b6000806000606084860312156124ae57600080fd5b6124b784612438565b92506124c560208501612438565b9150604084013590509250925092565b803563ffffffff8116811461244f57600080fd5b6000602082840312156124fb57600080fd5b611bdd826124d5565b6020808252825182820181905260009190848201906040850190845b8181101561254257835163ffffffff1683529284019291840191600101612520565b50909695505050505050565b6000806040838503121561256157600080fd5b612470836124d5565b60008083601f84011261257c57600080fd5b50813567ffffffffffffffff81111561259457600080fd5b6020830191508360208285010111156114c257600080fd5b60008060008060008060a087890312156125c557600080fd5b6125ce876124d5565b95506020870135945060408701359350606087013567ffffffffffffffff8111156125f857600080fd5b61260489828a0161256a565b9094509250612617905060808801612438565b90509295509295509295565b6000806000806060858703121561263957600080fd5b612642856124d5565b935060208501359250604085013567ffffffffffffffff81111561266557600080fd5b6126718782880161256a565b95989497509550505050565b60008083601f84011261268f57600080fd5b50813567ffffffffffffffff8111156126a757600080fd5b6020830191508360208260051b85010111156114c257600080fd5b600080602083850312156126d557600080fd5b823567ffffffffffffffff8111156126ec57600080fd5b6126f88582860161267d565b90969095509350505050565b60008060006060848603121561271957600080fd5b612722846124d5565b95602085013595506040909401359392505050565b6000806020838503121561274a57600080fd5b823567ffffffffffffffff8082111561276257600080fd5b818501915085601f83011261277657600080fd5b81358181111561278557600080fd5b8660208260061b850101111561279a57600080fd5b60209290920196919550909350505050565b600080604083850312156127bf57600080fd5b6127c883612438565b91506127d660208401612438565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261280657600080fd5b813567ffffffffffffffff80821115612821576128216127df565b604051601f8301601f19908116603f01168101908282118183101715612849576128496127df565b8160405283815286602085880101111561286257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c0878903121561289b57600080fd5b86359550602087013567ffffffffffffffff808211156128ba57600080fd5b6128c68a838b016127f5565b965060408901359150808211156128dc57600080fd5b506128e989828a016127f5565b9450506128f860608801612438565b925061290660808801612438565b915061261760a08801612438565b6000806000806040858703121561292a57600080fd5b843567ffffffffffffffff8082111561294257600080fd5b61294e8883890161267d565b9096509450602087013591508082111561296757600080fd5b506126718782880161267d565b600181811c9082168061298857607f821691505b6020821081036129a857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610828576108286129ae565b634e487b7160e01b600052603260045260246000fd5b83815282602082015260008251612a0b8160408501602087016123d5565b91909101604001949350505050565b63ffffffff8616815284602082015260a060408201526000612a3f60a08301866123f9565b8281036060840152612a5181866123f9565b9150506001600160a01b03831660808301529695505050505050565b600060208284031215612a7f57600080fd5b5051919050565b7f4e6f20726f7574657220656e726f6c6c656420666f7220646f6d61696e3a2000815260008251612abe81601f8501602087016123d5565b91909101601f0192915050565b60008085851115612adb57600080fd5b83861115612ae857600080fd5b5050820193919092039150565b8035602083101561082857600019602084900360031b1b1692915050565b601f821115610de8576000816000526020600020601f850160051c81016020861015612b3c5750805b601f850160051c820191505b81811015610ff957828155600101612b48565b815167ffffffffffffffff811115612b7557612b756127df565b612b8981612b838454612974565b84612b13565b602080601f831160018114612bbe5760008415612ba65750858301515b600019600386901b1c1916600185901b178555610ff9565b600085815260208120601f198616915b82811015612bed57888601518255948401946001909101908401612bce565b5085821015612c0b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61ffff60f01b8660f01b1681528460028201528360228201526bffffffffffffffffffffffff198360601b16604282015260008251612c618160568501602087016123d5565b919091016056019695505050505050565b81810381811115610828576108286129ae565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220b0a80ba6288d999c6dbcb80a0a9e10c61ee64771b5a2c9c7e1f35573c9af0cf564736f6c63430008170033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "ReceivedTransferRemote(uint32,bytes32,uint256)": {
        "details": "Emitted on `_handle` when a transfer message is processed.",
        "params": {
          "amount": "The amount of tokens minted on the destination chain.",
          "origin": "The identifier of the origin chain.",
          "recipient": "The address of the recipient on the destination chain."
        }
      },
      "SentTransferRemote(uint32,bytes32,uint256)": {
        "details": "Emitted on `transferRemote` when a transfer message is dispatched.",
        "params": {
          "amount": "The amount of tokens burnt on the origin chain.",
          "destination": "The identifier of the destination chain.",
          "recipient": "The address of the recipient on the destination chain."
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "enrollRemoteRouter(uint32,bytes32)": {
        "params": {
          "_domain": "The domain of the remote Application Router",
          "_router": "The address of the remote Application Router"
        }
      },
      "enrollRemoteRouters(uint32[],bytes32[])": {
        "params": {
          "_addresses": "The addresses of the remote Application Routers",
          "_domains": "The domains of the remote Application Routers"
        }
      },
      "handle(uint32,bytes32,bytes)": {
        "params": {
          "_message": "The message",
          "_origin": "The origin domain",
          "_sender": "The sender address"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(uint256,string,string,address,address,address)": {
        "params": {
          "_name": "The name of the token.",
          "_symbol": "The symbol of the token.",
          "_totalSupply": "The initial supply of the token."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quoteGasPayment(uint32)": {
        "params": {
          "_destinationDomain": "The domain of the router."
        },
        "returns": {
          "_0": "_gasPayment Payment computed by the registered InterchainGasPaymaster."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "routers(uint32)": {
        "details": "Returns 0 address if no router is enrolled for the given domain",
        "params": {
          "_domain": "The remote domain ID."
        },
        "returns": {
          "_0": "router The address of the Router contract for the given domain"
        }
      },
      "setDestinationGas((uint32,uint256)[])": {
        "params": {
          "gasConfigs": "The array of GasRouterConfig structs"
        }
      },
      "setDestinationGas(uint32,uint256)": {
        "params": {
          "domain": "The destination domain ID",
          "gas": "The gas limit"
        }
      },
      "setHook(address)": {
        "params": {
          "_hook": "The address of the hook contract."
        }
      },
      "setInterchainSecurityModule(address)": {
        "params": {
          "_module": "The address of the interchain security module contract."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferRemote(uint32,bytes32,uint256)": {
        "details": "Delegates transfer logic to `_transferFromSender` implementation.Emits `SentTransferRemote` event on the origin chain.",
        "params": {
          "_amountOrId": "The amount or identifier of tokens to be sent to the remote recipient.",
          "_destination": "The identifier of the destination chain.",
          "_recipient": "The address of the recipient on the destination chain."
        },
        "returns": {
          "messageId": "The identifier of the dispatched message."
        }
      },
      "transferRemote(uint32,bytes32,uint256,bytes,address)": {
        "details": "Delegates transfer logic to `_transferFromSender` implementation.The metadata is the token metadata, and is DIFFERENT than the hook metadata.Emits `SentTransferRemote` event on the origin chain.",
        "params": {
          "_amountOrId": "The amount or identifier of tokens to be sent to the remote recipient.",
          "_destination": "The identifier of the destination chain.",
          "_hook": "The post dispatch hook to be called by the Mailbox",
          "_hookMetadata": "The metadata passed into the hook",
          "_recipient": "The address of the recipient on the destination chain."
        },
        "returns": {
          "messageId": "The identifier of the dispatched message."
        }
      },
      "unenrollRemoteRouter(uint32)": {
        "params": {
          "_domain": "The domain of the remote Application Router"
        }
      },
      "unenrollRemoteRouters(uint32[])": {
        "params": {
          "_domains": "The domains of the remote Application Routers"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "enrollRemoteRouter(uint32,bytes32)": {
        "notice": "Register the address of a Router contract for the same Application on a remote chain"
      },
      "enrollRemoteRouters(uint32[],bytes32[])": {
        "notice": "Batch version of `enrollRemoteRouter`"
      },
      "handle(uint32,bytes32,bytes)": {
        "notice": "Handles an incoming message"
      },
      "initialize(uint256,string,string,address,address,address)": {
        "notice": "Initializes the Hyperlane router, ERC20 metadata, and mints initial supply to deployer."
      },
      "quoteGasPayment(uint32)": {
        "notice": "Returns the gas payment required to dispatch a message to the given domain's router."
      },
      "routers(uint32)": {
        "notice": "Returns the address of the Router contract for the given domain"
      },
      "setDestinationGas((uint32,uint256)[])": {
        "notice": "Sets the gas amount dispatched for each configured domain."
      },
      "setDestinationGas(uint32,uint256)": {
        "notice": "Sets the gas amount dispatched for each configured domain."
      },
      "setHook(address)": {
        "notice": "Sets the address of the application's custom hook."
      },
      "setInterchainSecurityModule(address)": {
        "notice": "Sets the address of the application's custom interchain security module."
      },
      "transferRemote(uint32,bytes32,uint256)": {
        "notice": "Transfers `_amountOrId` token to `_recipient` on `_destination` domain."
      },
      "transferRemote(uint32,bytes32,uint256,bytes,address)": {
        "notice": "Transfers `_amountOrId` token to `_recipient` on `_destination` domain with a specified hook"
      },
      "unenrollRemoteRouter(uint32)": {
        "notice": "Unregister the domain"
      },
      "unenrollRemoteRouters(uint32[])": {
        "notice": "Batch version of `unenrollRemoteRouter`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2935,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2938,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7315,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4719,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4725,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4727,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 4729,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 4731,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 5311,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 2807,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 2927,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 227,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "hook",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IPostDispatchHook)1378"
      },
      {
        "astId": 230,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "interchainSecurityModule",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IInterchainSecurityModule)1143"
      },
      {
        "astId": 234,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "__GAP",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 438,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "_routers",
        "offset": 0,
        "slot": "201",
        "type": "t_struct(UintToBytes32Map)1394_storage"
      },
      {
        "astId": 442,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "__GAP",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 24,
        "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
        "label": "destinationGas",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_uint32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IInterchainSecurityModule)1143": {
        "encoding": "inplace",
        "label": "contract IInterchainSecurityModule",
        "numberOfBytes": "20"
      },
      "t_contract(IPostDispatchHook)1378": {
        "encoding": "inplace",
        "label": "contract IPostDispatchHook",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)17089_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 17088,
            "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)16895_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)15642_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 15637,
            "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)17089_storage"
          },
          {
            "astId": 15641,
            "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)16895_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 16890,
            "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 16894,
            "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToBytes32Map)1394_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMapExtended.UintToBytes32Map",
        "members": [
          {
            "astId": 1393,
            "contract": "contracts/MyCustomHypERC20.sol:MyCustomHypERC20",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)15642_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}